// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: MiniMessageLexer.flex

package dev.privatech.plugin.minimessage;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static dev.privatech.plugin.minimessage.psi.MiniMessageTypes.*;


public class MiniMessageLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TAG = 2;
  public static final int ARGUMENT_START_STATE = 4;
  public static final int ARGUMENT_STATE = 6;
  public static final int STRING_DOUBLE = 8;
  public static final int STRING_SINGLE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\5\1\22\0\1\1\1\2\1\3\1\4\3\0"+
    "\1\5\5\0\1\6\1\0\1\7\12\10\1\11\1\0"+
    "\1\12\1\0\1\13\1\14\1\0\6\15\25\0\1\16"+
    "\2\0\1\17\1\0\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\6\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\6\1\46\1\6\12\0\1\1\32\0"+
    "\1\1\6\0\1\47\u01d8\0\1\1\177\0\13\1\35\0"+
    "\2\1\5\0\1\1\57\0\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\5\0\1\1\1\2\1\3\1\1\2\4\1\2"+
    "\2\4\1\5\1\6\1\7\1\10\1\11\1\4\1\5"+
    "\2\12\5\5\1\12\10\5\1\12\2\5\1\13\1\14"+
    "\1\15\1\13\1\16\1\13\3\17\1\20\1\21\3\20"+
    "\2\1\1\22\1\23\1\24\2\12\3\5\1\0\3\5"+
    "\1\12\26\5\2\12\3\5\1\25\1\26\2\17\1\20"+
    "\2\5\1\0\16\5\1\12\4\5\1\12\10\5\1\0"+
    "\10\5\1\12\12\5\1\0\15\5\1\0\12\5\1\12"+
    "\20\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258"+
    "\0\u01b8\0\u01b8\0\u01b8\0\u01b8\0\u0258\0\u0280\0\u02a8\0\u02d0"+
    "\0\u02f8\0\u0320\0\u0348\0\u0370\0\u0398\0\u03c0\0\u03e8\0\u0410"+
    "\0\u0438\0\u0460\0\u0488\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u0550"+
    "\0\u0578\0\u01b8\0\u01b8\0\u01b8\0\u05a0\0\u01b8\0\u05c8\0\u05f0"+
    "\0\u0618\0\u0640\0\u0668\0\u01b8\0\u0690\0\u06b8\0\u06e0\0\u01b8"+
    "\0\u0708\0\u0140\0\u01b8\0\u01b8\0\u0730\0\u0758\0\u0780\0\u07a8"+
    "\0\u07d0\0\u07f8\0\u0820\0\u0848\0\u0870\0\u0258\0\u0898\0\u08c0"+
    "\0\u08e8\0\u0910\0\u0938\0\u0960\0\u0988\0\u09b0\0\u09d8\0\u0a00"+
    "\0\u0a28\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18\0\u0b40"+
    "\0\u0b68\0\u0b90\0\u0bb8\0\u0be0\0\u0c08\0\u0c30\0\u0c58\0\u0c80"+
    "\0\u0ca8\0\u01b8\0\u01b8\0\u01b8\0\u05a0\0\u01b8\0\u0cd0\0\u0cf8"+
    "\0\u0d20\0\u0d48\0\u0d70\0\u0d98\0\u0dc0\0\u0de8\0\u0e10\0\u0e38"+
    "\0\u0e60\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00\0\u0f28\0\u0f50\0\u0f78"+
    "\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018\0\u1040\0\u1068\0\u1090\0\u10b8"+
    "\0\u10e0\0\u1108\0\u1130\0\u1158\0\u1180\0\u11a8\0\u11d0\0\u11f8"+
    "\0\u1220\0\u1248\0\u1270\0\u1298\0\u12c0\0\u12e8\0\u1310\0\u1338"+
    "\0\u1360\0\u1388\0\u13b0\0\u13d8\0\u1400\0\u1428\0\u1450\0\u1478"+
    "\0\u14a0\0\u14c8\0\u14f0\0\u1518\0\u1540\0\u1568\0\u1590\0\u15b8"+
    "\0\u15e0\0\u1608\0\u1630\0\u1658\0\u1680\0\u16a8\0\u16d0\0\u16f8"+
    "\0\u1720\0\u1748\0\u1770\0\u1798\0\u17c0\0\u17e8\0\u1810\0\u1838"+
    "\0\u1860\0\u1888\0\u01b8\0\u18b0\0\u18d8\0\u1900\0\u1928\0\u1950"+
    "\0\u1978\0\u19a0\0\u19c8\0\u19f0\0\u1a18\0\u1a40\0\u1a68\0\u1a90"+
    "\0\u1ab8\0\u1ae0\0\u1b08";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\10\7\1\11\3\7\1\12\30\7\1\13"+
    "\1\14\1\15\1\16\1\14\1\17\1\14\1\20\1\21"+
    "\1\20\1\22\1\23\1\24\1\25\2\14\1\20\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\20\1\41\1\42\1\43\1\20\1\44"+
    "\1\45\1\46\1\47\1\20\1\50\1\51\1\14\3\52"+
    "\1\53\1\52\1\54\1\52\1\55\1\52\1\56\1\52"+
    "\1\56\2\52\1\57\31\52\7\60\1\61\1\60\1\56"+
    "\1\60\1\56\2\60\1\62\31\60\3\63\1\64\12\63"+
    "\1\65\31\63\5\66\1\64\10\66\1\67\31\66\12\7"+
    "\1\0\3\7\1\0\30\7\1\0\1\7\1\10\10\7"+
    "\1\0\3\7\1\0\30\7\1\0\1\70\1\71\1\0"+
    "\1\70\1\0\1\70\3\0\1\70\1\72\1\70\1\0"+
    "\2\70\30\0\13\70\1\73\3\70\1\73\15\70\1\73"+
    "\23\70\1\74\7\70\6\74\3\70\5\74\2\70\1\74"+
    "\7\70\51\0\1\15\54\0\1\20\1\0\1\20\6\0"+
    "\2\20\1\75\2\20\1\32\3\20\1\76\4\20\1\42"+
    "\2\20\1\77\1\100\1\20\1\47\3\20\7\0\1\20"+
    "\1\0\1\101\4\0\1\102\1\0\1\20\6\101\21\20"+
    "\7\0\1\20\1\0\1\20\6\0\30\20\7\0\1\20"+
    "\1\0\1\20\6\0\20\20\1\103\7\20\7\0\1\20"+
    "\1\0\1\20\6\0\13\20\1\104\2\20\1\105\2\20"+
    "\1\106\6\20\7\0\1\20\1\0\1\20\6\0\13\20"+
    "\1\107\2\20\1\110\11\20\7\0\1\20\1\0\1\20"+
    "\6\0\1\20\1\111\26\20\7\0\1\20\1\0\1\20"+
    "\6\0\14\20\1\106\13\20\7\0\1\20\1\0\1\20"+
    "\6\0\16\20\1\112\11\20\7\0\1\20\1\0\1\20"+
    "\6\0\16\20\1\105\2\20\1\113\6\20\7\0\1\20"+
    "\1\0\1\20\6\0\5\20\1\114\10\20\1\115\11\20"+
    "\7\0\1\20\1\0\1\20\6\0\15\20\1\116\5\20"+
    "\1\117\4\20\7\0\1\20\1\0\1\20\6\0\5\20"+
    "\1\120\22\20\7\0\1\20\1\0\1\20\6\0\1\20"+
    "\1\121\7\20\1\122\16\20\7\0\1\20\1\0\1\20"+
    "\6\0\2\20\1\123\2\20\1\124\22\20\7\0\1\20"+
    "\1\0\1\20\6\0\2\20\1\125\25\20\7\0\1\20"+
    "\1\0\1\20\6\0\21\20\1\126\6\20\7\0\1\20"+
    "\1\0\1\20\6\0\1\20\1\127\3\20\1\130\22\20"+
    "\7\0\1\20\1\0\1\20\6\0\3\20\1\131\1\20"+
    "\1\132\2\20\1\133\6\20\1\134\3\20\1\135\4\20"+
    "\7\0\1\20\1\0\1\20\6\0\21\20\1\136\6\20"+
    "\7\0\1\20\1\0\1\20\6\0\15\20\1\137\12\20"+
    "\7\0\1\20\1\0\1\20\6\0\10\20\1\140\17\20"+
    "\7\0\1\20\1\0\1\20\6\0\5\20\1\141\22\20"+
    "\14\0\1\142\52\0\1\143\15\0\1\143\13\0\7\60"+
    "\1\61\1\60\1\0\1\60\1\0\2\60\1\0\40\60"+
    "\1\61\1\60\1\0\1\60\1\142\2\60\1\0\31\60"+
    "\7\144\1\145\1\144\1\0\1\144\1\0\2\144\1\73"+
    "\15\144\1\73\13\144\3\63\1\0\12\63\1\0\31\63"+
    "\3\146\1\73\12\146\1\73\15\146\1\73\13\146\5\66"+
    "\1\0\10\66\1\0\31\66\5\146\1\73\10\146\1\73"+
    "\15\146\1\73\13\146\1\0\1\71\54\0\1\20\1\0"+
    "\1\20\6\0\16\20\1\105\11\20\7\0\1\20\1\0"+
    "\1\20\6\0\23\20\1\117\4\20\7\0\1\20\1\0"+
    "\1\20\6\0\5\20\1\147\22\20\7\0\1\20\1\0"+
    "\1\20\6\0\10\20\1\133\12\20\1\135\4\20\7\0"+
    "\1\20\1\0\1\150\4\0\1\151\1\0\1\20\6\150"+
    "\21\20\11\0\1\151\4\0\1\151\2\0\6\151\30\0"+
    "\1\20\1\0\1\20\6\0\24\20\1\152\3\20\7\0"+
    "\1\20\1\0\1\20\6\0\1\20\1\153\22\20\1\154"+
    "\3\20\7\0\1\20\1\0\1\20\6\0\13\20\1\155"+
    "\14\20\7\0\1\20\1\0\1\20\6\0\11\20\1\153"+
    "\16\20\7\0\1\20\1\0\1\20\6\0\13\20\1\156"+
    "\14\20\7\0\1\20\1\0\1\20\6\0\21\20\1\157"+
    "\1\20\1\152\4\20\7\0\1\20\1\0\1\20\6\0"+
    "\15\20\1\123\12\20\7\0\1\20\1\0\1\20\6\0"+
    "\1\20\1\160\3\20\1\161\22\20\7\0\1\20\1\0"+
    "\1\20\6\0\1\20\1\155\26\20\7\0\1\20\1\0"+
    "\1\20\6\0\25\20\1\162\2\20\7\0\1\20\1\0"+
    "\1\20\6\0\22\20\1\163\5\20\7\0\1\20\1\0"+
    "\1\20\6\0\1\20\1\164\26\20\7\0\1\20\1\0"+
    "\1\20\6\0\27\20\1\106\7\0\1\20\1\0\1\20"+
    "\6\0\15\20\1\165\12\20\7\0\1\20\1\0\1\20"+
    "\6\0\7\20\1\166\20\20\7\0\1\20\1\0\1\20"+
    "\6\0\23\20\1\106\4\20\7\0\1\20\1\0\1\20"+
    "\6\0\26\20\1\167\1\20\7\0\1\20\1\0\1\20"+
    "\6\0\6\20\1\170\21\20\7\0\1\20\1\0\1\20"+
    "\6\0\11\20\1\171\16\20\7\0\1\20\1\0\1\20"+
    "\6\0\11\20\1\172\16\20\7\0\1\20\1\0\1\20"+
    "\6\0\4\20\1\106\15\20\1\173\5\20\7\0\1\20"+
    "\1\0\1\20\6\0\16\20\1\174\11\20\7\0\1\20"+
    "\1\0\1\20\6\0\13\20\1\175\14\20\7\0\1\20"+
    "\1\0\1\20\6\0\1\20\1\176\26\20\7\0\1\20"+
    "\1\0\1\20\6\0\21\20\1\140\6\20\7\0\1\20"+
    "\1\0\1\20\6\0\21\20\1\177\6\20\7\0\1\20"+
    "\1\0\1\20\6\0\1\200\1\201\26\20\7\0\1\20"+
    "\1\0\1\20\6\0\4\20\1\202\23\20\7\0\1\20"+
    "\1\0\1\20\6\0\11\20\1\203\16\20\7\0\1\20"+
    "\1\0\1\20\6\0\13\20\1\204\14\20\7\0\1\20"+
    "\1\0\1\20\6\0\22\20\1\173\5\20\7\0\1\20"+
    "\1\0\1\205\4\0\1\206\1\0\1\20\6\205\21\20"+
    "\11\0\1\206\4\0\1\206\2\0\6\206\30\0\1\20"+
    "\1\0\1\20\6\0\1\20\1\106\26\20\7\0\1\20"+
    "\1\0\1\20\6\0\3\20\1\207\24\20\7\0\1\20"+
    "\1\0\1\20\6\0\5\20\1\106\22\20\7\0\1\20"+
    "\1\0\1\20\6\0\4\20\1\106\23\20\7\0\1\20"+
    "\1\0\1\20\6\0\16\20\1\210\11\20\7\0\1\20"+
    "\1\0\1\20\6\0\12\20\1\211\15\20\7\0\1\20"+
    "\1\0\1\20\6\0\4\20\1\212\22\20\1\106\7\0"+
    "\1\20\1\0\1\20\6\0\5\20\1\213\21\20\1\106"+
    "\7\0\1\20\1\0\1\20\6\0\5\20\1\214\22\20"+
    "\7\0\1\20\1\0\1\20\6\0\5\20\1\215\22\20"+
    "\7\0\1\20\1\0\1\20\6\0\13\20\1\216\14\20"+
    "\7\0\1\20\1\0\1\20\6\0\7\20\1\217\20\20"+
    "\7\0\1\20\1\0\1\20\6\0\10\20\1\220\17\20"+
    "\7\0\1\20\1\0\1\20\6\0\13\20\1\221\14\20"+
    "\7\0\1\20\1\0\1\20\6\0\24\20\1\222\3\20"+
    "\7\0\1\20\1\0\1\20\6\0\4\20\1\154\23\20"+
    "\7\0\1\20\1\0\1\20\6\0\15\20\1\223\12\20"+
    "\7\0\1\20\1\0\1\20\6\0\5\20\1\123\22\20"+
    "\7\0\1\20\1\0\1\20\6\0\21\20\1\154\6\20"+
    "\7\0\1\20\1\0\1\20\6\0\5\20\1\224\22\20"+
    "\7\0\1\20\1\0\1\20\6\0\4\20\1\225\23\20"+
    "\7\0\1\20\1\0\1\20\6\0\11\20\1\226\16\20"+
    "\7\0\1\20\1\0\1\20\6\0\16\20\1\214\11\20"+
    "\7\0\1\20\1\0\1\20\6\0\15\20\1\227\12\20"+
    "\7\0\1\20\1\0\1\20\6\0\5\20\1\230\22\20"+
    "\7\0\1\20\1\0\1\20\6\0\23\20\1\154\4\20"+
    "\7\0\1\20\1\0\1\20\6\0\13\20\1\225\14\20"+
    "\7\0\1\20\1\0\1\231\4\0\1\232\1\0\1\20"+
    "\6\231\21\20\11\0\1\232\4\0\1\232\2\0\6\232"+
    "\30\0\1\20\1\0\1\20\6\0\12\20\1\106\15\20"+
    "\7\0\1\20\1\0\1\20\6\0\21\20\1\106\2\20"+
    "\1\214\3\20\7\0\1\20\1\0\1\20\6\0\1\233"+
    "\27\20\7\0\1\20\1\0\1\20\6\0\11\20\1\234"+
    "\16\20\7\0\1\20\1\0\1\20\6\0\15\20\1\106"+
    "\12\20\7\0\1\20\1\0\1\20\6\0\21\20\1\106"+
    "\6\20\7\0\1\20\1\0\1\20\6\0\21\20\1\235"+
    "\6\20\7\0\1\20\1\0\1\20\6\0\11\20\1\236"+
    "\16\20\7\0\1\20\1\0\1\20\6\0\1\200\27\20"+
    "\7\0\1\20\1\0\1\20\6\0\23\20\1\237\4\20"+
    "\7\0\1\20\1\0\1\20\6\0\11\20\1\240\16\20"+
    "\7\0\1\20\1\0\1\20\6\0\22\20\1\241\5\20"+
    "\7\0\1\20\1\0\1\20\6\0\2\20\1\225\25\20"+
    "\7\0\1\20\1\0\1\20\6\0\3\20\1\242\24\20"+
    "\7\0\1\20\1\0\1\20\6\0\16\20\1\243\11\20"+
    "\7\0\1\20\1\0\1\20\6\0\12\20\1\244\15\20"+
    "\7\0\1\20\1\0\1\20\6\0\22\20\1\245\5\20"+
    "\7\0\1\20\1\0\1\20\6\0\21\20\1\246\6\20"+
    "\7\0\1\20\1\0\1\247\4\0\1\250\1\0\1\20"+
    "\6\247\21\20\11\0\1\250\4\0\1\250\2\0\6\250"+
    "\30\0\1\20\1\0\1\20\6\0\1\20\1\26\1\251"+
    "\4\20\1\252\7\20\1\253\1\20\1\254\6\20\7\0"+
    "\1\20\1\0\1\20\6\0\5\20\1\112\22\20\7\0"+
    "\1\20\1\0\1\20\6\0\23\20\1\255\4\20\7\0"+
    "\1\20\1\0\1\20\6\0\3\20\1\106\24\20\7\0"+
    "\1\20\1\0\1\20\6\0\1\256\27\20\7\0\1\20"+
    "\1\0\1\20\6\0\15\20\1\154\12\20\7\0\1\20"+
    "\1\0\1\20\6\0\3\20\1\257\24\20\7\0\1\20"+
    "\1\0\1\20\6\0\23\20\1\200\4\20\7\0\1\20"+
    "\1\0\1\20\6\0\26\20\1\106\1\20\7\0\1\20"+
    "\1\0\1\20\6\0\5\20\1\260\22\20\7\0\1\20"+
    "\1\0\1\20\6\0\11\20\1\235\1\20\1\261\14\20"+
    "\7\0\1\20\1\0\1\20\6\0\13\20\1\262\14\20"+
    "\7\0\1\20\1\0\1\106\4\0\1\263\1\0\1\20"+
    "\6\106\21\20\11\0\1\263\4\0\1\263\2\0\6\263"+
    "\30\0\1\20\1\0\1\20\6\0\13\20\1\264\14\20"+
    "\7\0\1\20\1\0\1\20\6\0\21\20\1\265\6\20"+
    "\7\0\1\20\1\0\1\20\6\0\24\20\1\266\3\20"+
    "\7\0\1\20\1\0\1\20\6\0\5\20\1\155\22\20"+
    "\7\0\1\20\1\0\1\20\6\0\11\20\1\267\16\20"+
    "\7\0\1\20\1\0\1\20\6\0\17\20\1\253\10\20"+
    "\7\0\1\20\1\0\1\20\6\0\1\20\1\270\26\20"+
    "\7\0\1\20\1\0\1\20\6\0\23\20\1\271\4\20"+
    "\7\0\1\20\1\0\1\20\6\0\1\20\1\272\26\20"+
    "\7\0\1\20\1\0\1\20\6\0\11\20\1\273\16\20"+
    "\7\0\1\20\1\0\1\20\6\0\24\20\1\154\3\20"+
    "\7\0\1\20\1\0\1\20\6\0\1\20\1\120\3\20"+
    "\1\161\22\20\7\0\1\20\1\0\1\20\6\0\21\20"+
    "\1\274\6\20\7\0\1\20\1\0\1\20\6\0\16\20"+
    "\1\213\11\20\7\0\1\20\1\0\1\20\6\0\23\20"+
    "\1\254\4\20\7\0\1\20\1\0\1\20\6\0\10\20"+
    "\1\275\17\20\7\0\1\20\1\0\1\20\6\0\23\20"+
    "\1\276\4\20\7\0\1\20\1\0\1\20\6\0\15\20"+
    "\1\254\12\20\7\0\1\20\1\0\1\20\6\0\17\20"+
    "\1\277\10\20\7\0\1\20\1\0\1\20\6\0\21\20"+
    "\1\300\6\20\7\0\1\20\1\0\1\20\6\0\5\20"+
    "\1\217\22\20\7\0\1\20\1\0\1\20\6\0\13\20"+
    "\1\154\14\20\7\0\1\20\1\0\1\20\6\0\16\20"+
    "\1\301\11\20\7\0\1\20\1\0\1\20\6\0\24\20"+
    "\1\302\3\20\7\0\1\20\1\0\1\20\6\0\7\20"+
    "\1\303\20\20\7\0\1\20\1\0\1\20\6\0\10\20"+
    "\1\106\17\20\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6960];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\5\0\5\1\1\11\4\1\4\11\25\1\3\11"+
    "\1\1\1\11\5\1\1\11\3\1\1\11\2\1\2\11"+
    "\5\1\1\0\37\1\3\11\1\1\1\11\2\1\1\0"+
    "\34\1\1\0\23\1\1\0\15\1\1\0\12\1\1\11"+
    "\20\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public MiniMessageLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiniMessageLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return PLAIN_TEXT;
            }
          // fall through
          case 23: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 24: break;
          case 3:
            { yybegin(TAG); return LT;
            }
          // fall through
          case 25: break;
          case 4:
            { return BAD_CHARACTER;
            }
          // fall through
          case 26: break;
          case 5:
            { return CUSTOM_TAG_NAME;
            }
          // fall through
          case 27: break;
          case 6:
            { return SLASH;
            }
          // fall through
          case 28: break;
          case 7:
            { yybegin(ARGUMENT_START_STATE); return COLON;
            }
          // fall through
          case 29: break;
          case 8:
            { return LT;
            }
          // fall through
          case 30: break;
          case 9:
            { yybegin(YYINITIAL); return GT;
            }
          // fall through
          case 31: break;
          case 10:
            { return TAG_NAME;
            }
          // fall through
          case 32: break;
          case 11:
            { yybegin(ARGUMENT_STATE); return ARGUMENT;
            }
          // fall through
          case 33: break;
          case 12:
            { yybegin(STRING_DOUBLE); return QUOTATION;
            }
          // fall through
          case 34: break;
          case 13:
            { yybegin(STRING_SINGLE); return QUOTATION;
            }
          // fall through
          case 35: break;
          case 14:
            { yypushback(1); yybegin(TAG); return ARGUMENT;
            }
          // fall through
          case 36: break;
          case 15:
            { return ARGUMENT;
            }
          // fall through
          case 37: break;
          case 16:
            { return STRING_TEXT;
            }
          // fall through
          case 38: break;
          case 17:
            { yybegin(TAG); return QUOTATION;
            }
          // fall through
          case 39: break;
          case 18:
            { yypushback(1); return PLAIN_TEXT;
            }
          // fall through
          case 40: break;
          case 19:
            { return ESCAPED_CHAR;
            }
          // fall through
          case 41: break;
          case 20:
            { return LEGACY_FORMATTING_CODE;
            }
          // fall through
          case 42: break;
          case 21:
            { yypushback(2); yybegin(TAG); return ARGUMENT;
            }
          // fall through
          case 43: break;
          case 22:
            { yybegin(ARGUMENT_STATE); return ESCAPED_CHAR;
            }
          // fall through
          case 44: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
