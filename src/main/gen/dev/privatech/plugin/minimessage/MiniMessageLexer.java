// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: MiniMessageLexer.flex

package dev.privatech.plugin.minimessage;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static dev.privatech.plugin.minimessage.psi.MiniMessageTypes.*;


public class MiniMessageLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TAG = 2;
  public static final int ARGUMENT_STATE = 4;
  public static final int STRING_DOUBLE = 6;
  public static final int STRING_SINGLE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\5\1\22\0\1\1\1\2\1\3\1\4\3\0"+
    "\1\5\5\0\1\6\1\0\1\7\12\10\1\11\1\0"+
    "\1\12\1\0\1\13\1\14\1\0\6\15\25\0\1\16"+
    "\2\0\1\17\1\0\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\6\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\6\1\46\1\6\12\0\1\1\32\0"+
    "\1\1\6\0\1\47\u01d8\0\1\1\177\0\13\1\35\0"+
    "\2\1\5\0\1\1\57\0\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\4\0\1\1\1\2\1\3\1\1\2\4\1\2"+
    "\2\4\1\5\1\6\1\7\1\10\1\11\1\4\1\5"+
    "\2\12\5\5\1\12\10\5\1\12\2\5\1\13\1\14"+
    "\1\15\1\16\1\17\3\16\2\1\1\20\1\21\1\22"+
    "\2\12\3\5\1\0\3\5\1\12\24\5\2\12\3\5"+
    "\1\16\2\5\1\0\16\5\1\12\4\5\1\12\10\5"+
    "\1\0\10\5\1\12\12\5\1\0\15\5\1\0\12\5"+
    "\1\12\20\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0190"+
    "\0\u0190\0\u0190\0\u0190\0\u0230\0\u0258\0\u0280\0\u02a8\0\u02d0"+
    "\0\u02f8\0\u0320\0\u0348\0\u0370\0\u0398\0\u03c0\0\u03e8\0\u0410"+
    "\0\u0438\0\u0460\0\u0488\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u0550"+
    "\0\u0578\0\u0190\0\u0190\0\u05a0\0\u0190\0\u05c8\0\u05f0\0\u0618"+
    "\0\u0190\0\u0640\0\u0118\0\u0190\0\u0190\0\u0668\0\u0690\0\u06b8"+
    "\0\u06e0\0\u0708\0\u0730\0\u0758\0\u0780\0\u07a8\0\u0230\0\u07d0"+
    "\0\u07f8\0\u0820\0\u0848\0\u0870\0\u0898\0\u08c0\0\u08e8\0\u0910"+
    "\0\u0938\0\u0960\0\u0988\0\u09b0\0\u09d8\0\u0a00\0\u0a28\0\u0a50"+
    "\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18\0\u0b40\0\u0b68\0\u0b90"+
    "\0\u0190\0\u0bb8\0\u0be0\0\u0c08\0\u0c30\0\u0c58\0\u0c80\0\u0ca8"+
    "\0\u0cd0\0\u0cf8\0\u0d20\0\u0d48\0\u0d70\0\u0d98\0\u0dc0\0\u0de8"+
    "\0\u0e10\0\u0e38\0\u0e60\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00\0\u0f28"+
    "\0\u0f50\0\u0f78\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018\0\u1040\0\u1068"+
    "\0\u1090\0\u10b8\0\u10e0\0\u1108\0\u1130\0\u1158\0\u1180\0\u11a8"+
    "\0\u11d0\0\u11f8\0\u1220\0\u1248\0\u1270\0\u1298\0\u12c0\0\u12e8"+
    "\0\u1310\0\u1338\0\u1360\0\u1388\0\u13b0\0\u13d8\0\u1400\0\u1428"+
    "\0\u1450\0\u1478\0\u14a0\0\u14c8\0\u14f0\0\u1518\0\u1540\0\u1568"+
    "\0\u1590\0\u15b8\0\u15e0\0\u1608\0\u1630\0\u1658\0\u1680\0\u16a8"+
    "\0\u16d0\0\u16f8\0\u1720\0\u1748\0\u1770\0\u0190\0\u1798\0\u17c0"+
    "\0\u17e8\0\u1810\0\u1838\0\u1860\0\u1888\0\u18b0\0\u18d8\0\u1900"+
    "\0\u1928\0\u1950\0\u1978\0\u19a0\0\u19c8\0\u19f0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\10\6\1\10\3\6\1\11\30\6\1\12"+
    "\1\13\1\14\1\15\1\13\1\16\1\13\1\17\1\20"+
    "\1\17\1\21\1\22\1\23\1\24\2\13\1\17\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\17\1\40\1\41\1\42\1\17\1\43"+
    "\1\44\1\45\1\46\1\17\1\47\1\50\1\13\1\51"+
    "\1\13\1\51\1\52\1\51\1\53\1\51\1\13\1\51"+
    "\1\13\1\51\1\13\34\51\3\54\1\55\12\54\1\56"+
    "\31\54\5\57\1\55\10\57\1\60\31\57\12\6\1\0"+
    "\3\6\1\0\30\6\1\0\1\6\1\7\10\6\1\0"+
    "\3\6\1\0\30\6\1\0\1\61\1\62\1\0\1\61"+
    "\1\0\1\61\3\0\1\61\1\63\1\61\1\0\2\61"+
    "\30\0\13\61\1\64\3\61\1\64\15\61\1\64\23\61"+
    "\1\65\7\61\6\65\3\61\5\65\2\61\1\65\7\61"+
    "\51\0\1\14\54\0\1\17\1\0\1\17\6\0\2\17"+
    "\1\66\2\17\1\31\3\17\1\67\4\17\1\41\2\17"+
    "\1\70\1\71\1\17\1\46\3\17\7\0\1\17\1\0"+
    "\1\72\4\0\1\73\1\0\1\17\6\72\21\17\7\0"+
    "\1\17\1\0\1\17\6\0\30\17\7\0\1\17\1\0"+
    "\1\17\6\0\20\17\1\74\7\17\7\0\1\17\1\0"+
    "\1\17\6\0\13\17\1\75\2\17\1\76\2\17\1\77"+
    "\6\17\7\0\1\17\1\0\1\17\6\0\13\17\1\100"+
    "\2\17\1\101\11\17\7\0\1\17\1\0\1\17\6\0"+
    "\1\17\1\102\26\17\7\0\1\17\1\0\1\17\6\0"+
    "\14\17\1\77\13\17\7\0\1\17\1\0\1\17\6\0"+
    "\16\17\1\103\11\17\7\0\1\17\1\0\1\17\6\0"+
    "\16\17\1\76\2\17\1\104\6\17\7\0\1\17\1\0"+
    "\1\17\6\0\16\17\1\105\11\17\7\0\1\17\1\0"+
    "\1\17\6\0\15\17\1\106\5\17\1\107\4\17\7\0"+
    "\1\17\1\0\1\17\6\0\5\17\1\110\22\17\7\0"+
    "\1\17\1\0\1\17\6\0\1\17\1\111\7\17\1\112"+
    "\16\17\7\0\1\17\1\0\1\17\6\0\2\17\1\113"+
    "\2\17\1\114\22\17\7\0\1\17\1\0\1\17\6\0"+
    "\2\17\1\115\25\17\7\0\1\17\1\0\1\17\6\0"+
    "\21\17\1\116\6\17\7\0\1\17\1\0\1\17\6\0"+
    "\1\17\1\117\3\17\1\120\22\17\7\0\1\17\1\0"+
    "\1\17\6\0\3\17\1\121\1\17\1\122\2\17\1\123"+
    "\12\17\1\124\4\17\7\0\1\17\1\0\1\17\6\0"+
    "\21\17\1\125\6\17\7\0\1\17\1\0\1\17\6\0"+
    "\15\17\1\126\12\17\7\0\1\17\1\0\1\17\6\0"+
    "\10\17\1\127\17\17\7\0\1\17\1\0\1\17\6\0"+
    "\5\17\1\130\22\17\1\0\1\51\1\0\5\51\1\0"+
    "\1\51\1\0\1\51\1\0\34\51\3\54\1\0\12\54"+
    "\1\0\31\54\3\131\1\64\12\131\1\64\15\131\1\64"+
    "\13\131\5\57\1\0\10\57\1\0\31\57\5\131\1\64"+
    "\10\131\1\64\15\131\1\64\13\131\1\0\1\62\54\0"+
    "\1\17\1\0\1\17\6\0\16\17\1\76\11\17\7\0"+
    "\1\17\1\0\1\17\6\0\23\17\1\107\4\17\7\0"+
    "\1\17\1\0\1\17\6\0\5\17\1\132\22\17\7\0"+
    "\1\17\1\0\1\17\6\0\10\17\1\123\12\17\1\124"+
    "\4\17\7\0\1\17\1\0\1\133\4\0\1\134\1\0"+
    "\1\17\6\133\21\17\11\0\1\134\4\0\1\134\2\0"+
    "\6\134\30\0\1\17\1\0\1\17\6\0\24\17\1\135"+
    "\3\17\7\0\1\17\1\0\1\17\6\0\1\17\1\136"+
    "\22\17\1\137\3\17\7\0\1\17\1\0\1\17\6\0"+
    "\13\17\1\140\14\17\7\0\1\17\1\0\1\17\6\0"+
    "\11\17\1\136\16\17\7\0\1\17\1\0\1\17\6\0"+
    "\13\17\1\141\14\17\7\0\1\17\1\0\1\17\6\0"+
    "\21\17\1\142\1\17\1\135\4\17\7\0\1\17\1\0"+
    "\1\17\6\0\15\17\1\113\12\17\7\0\1\17\1\0"+
    "\1\17\6\0\1\17\1\143\3\17\1\144\22\17\7\0"+
    "\1\17\1\0\1\17\6\0\25\17\1\145\2\17\7\0"+
    "\1\17\1\0\1\17\6\0\22\17\1\146\5\17\7\0"+
    "\1\17\1\0\1\17\6\0\1\17\1\147\26\17\7\0"+
    "\1\17\1\0\1\17\6\0\27\17\1\77\7\0\1\17"+
    "\1\0\1\17\6\0\15\17\1\150\12\17\7\0\1\17"+
    "\1\0\1\17\6\0\7\17\1\151\20\17\7\0\1\17"+
    "\1\0\1\17\6\0\23\17\1\77\4\17\7\0\1\17"+
    "\1\0\1\17\6\0\26\17\1\152\1\17\7\0\1\17"+
    "\1\0\1\17\6\0\6\17\1\153\21\17\7\0\1\17"+
    "\1\0\1\17\6\0\11\17\1\154\16\17\7\0\1\17"+
    "\1\0\1\17\6\0\11\17\1\155\16\17\7\0\1\17"+
    "\1\0\1\17\6\0\4\17\1\77\15\17\1\156\5\17"+
    "\7\0\1\17\1\0\1\17\6\0\16\17\1\157\11\17"+
    "\7\0\1\17\1\0\1\17\6\0\13\17\1\160\14\17"+
    "\7\0\1\17\1\0\1\17\6\0\1\17\1\161\26\17"+
    "\7\0\1\17\1\0\1\17\6\0\21\17\1\162\6\17"+
    "\7\0\1\17\1\0\1\17\6\0\1\163\1\164\26\17"+
    "\7\0\1\17\1\0\1\17\6\0\4\17\1\165\23\17"+
    "\7\0\1\17\1\0\1\17\6\0\11\17\1\166\16\17"+
    "\7\0\1\17\1\0\1\17\6\0\13\17\1\167\14\17"+
    "\7\0\1\17\1\0\1\17\6\0\22\17\1\156\5\17"+
    "\7\0\1\17\1\0\1\170\4\0\1\171\1\0\1\17"+
    "\6\170\21\17\11\0\1\171\4\0\1\171\2\0\6\171"+
    "\30\0\1\17\1\0\1\17\6\0\1\17\1\77\26\17"+
    "\7\0\1\17\1\0\1\17\6\0\3\17\1\172\24\17"+
    "\7\0\1\17\1\0\1\17\6\0\5\17\1\77\22\17"+
    "\7\0\1\17\1\0\1\17\6\0\4\17\1\77\23\17"+
    "\7\0\1\17\1\0\1\17\6\0\16\17\1\173\11\17"+
    "\7\0\1\17\1\0\1\17\6\0\12\17\1\174\15\17"+
    "\7\0\1\17\1\0\1\17\6\0\4\17\1\175\22\17"+
    "\1\77\7\0\1\17\1\0\1\17\6\0\5\17\1\176"+
    "\21\17\1\77\7\0\1\17\1\0\1\17\6\0\5\17"+
    "\1\177\22\17\7\0\1\17\1\0\1\17\6\0\5\17"+
    "\1\200\22\17\7\0\1\17\1\0\1\17\6\0\13\17"+
    "\1\201\14\17\7\0\1\17\1\0\1\17\6\0\7\17"+
    "\1\202\20\17\7\0\1\17\1\0\1\17\6\0\10\17"+
    "\1\203\17\17\7\0\1\17\1\0\1\17\6\0\13\17"+
    "\1\204\14\17\7\0\1\17\1\0\1\17\6\0\24\17"+
    "\1\205\3\17\7\0\1\17\1\0\1\17\6\0\4\17"+
    "\1\137\23\17\7\0\1\17\1\0\1\17\6\0\15\17"+
    "\1\206\12\17\7\0\1\17\1\0\1\17\6\0\5\17"+
    "\1\113\22\17\7\0\1\17\1\0\1\17\6\0\21\17"+
    "\1\137\6\17\7\0\1\17\1\0\1\17\6\0\5\17"+
    "\1\207\22\17\7\0\1\17\1\0\1\17\6\0\4\17"+
    "\1\210\23\17\7\0\1\17\1\0\1\17\6\0\11\17"+
    "\1\211\16\17\7\0\1\17\1\0\1\17\6\0\16\17"+
    "\1\177\11\17\7\0\1\17\1\0\1\17\6\0\15\17"+
    "\1\212\12\17\7\0\1\17\1\0\1\17\6\0\5\17"+
    "\1\213\22\17\7\0\1\17\1\0\1\17\6\0\23\17"+
    "\1\137\4\17\7\0\1\17\1\0\1\17\6\0\13\17"+
    "\1\210\14\17\7\0\1\17\1\0\1\214\4\0\1\215"+
    "\1\0\1\17\6\214\21\17\11\0\1\215\4\0\1\215"+
    "\2\0\6\215\30\0\1\17\1\0\1\17\6\0\12\17"+
    "\1\77\15\17\7\0\1\17\1\0\1\17\6\0\21\17"+
    "\1\77\2\17\1\177\3\17\7\0\1\17\1\0\1\17"+
    "\6\0\1\216\27\17\7\0\1\17\1\0\1\17\6\0"+
    "\11\17\1\217\16\17\7\0\1\17\1\0\1\17\6\0"+
    "\15\17\1\77\12\17\7\0\1\17\1\0\1\17\6\0"+
    "\21\17\1\77\6\17\7\0\1\17\1\0\1\17\6\0"+
    "\21\17\1\220\6\17\7\0\1\17\1\0\1\17\6\0"+
    "\11\17\1\221\16\17\7\0\1\17\1\0\1\17\6\0"+
    "\1\163\27\17\7\0\1\17\1\0\1\17\6\0\23\17"+
    "\1\222\4\17\7\0\1\17\1\0\1\17\6\0\11\17"+
    "\1\223\16\17\7\0\1\17\1\0\1\17\6\0\22\17"+
    "\1\224\5\17\7\0\1\17\1\0\1\17\6\0\2\17"+
    "\1\210\25\17\7\0\1\17\1\0\1\17\6\0\3\17"+
    "\1\225\24\17\7\0\1\17\1\0\1\17\6\0\16\17"+
    "\1\226\11\17\7\0\1\17\1\0\1\17\6\0\12\17"+
    "\1\227\15\17\7\0\1\17\1\0\1\17\6\0\22\17"+
    "\1\230\5\17\7\0\1\17\1\0\1\17\6\0\21\17"+
    "\1\231\6\17\7\0\1\17\1\0\1\232\4\0\1\233"+
    "\1\0\1\17\6\232\21\17\11\0\1\233\4\0\1\233"+
    "\2\0\6\233\30\0\1\17\1\0\1\17\6\0\1\17"+
    "\1\25\1\234\4\17\1\235\7\17\1\236\1\17\1\237"+
    "\6\17\7\0\1\17\1\0\1\17\6\0\5\17\1\103"+
    "\22\17\7\0\1\17\1\0\1\17\6\0\23\17\1\240"+
    "\4\17\7\0\1\17\1\0\1\17\6\0\3\17\1\77"+
    "\24\17\7\0\1\17\1\0\1\17\6\0\1\241\27\17"+
    "\7\0\1\17\1\0\1\17\6\0\15\17\1\137\12\17"+
    "\7\0\1\17\1\0\1\17\6\0\3\17\1\242\24\17"+
    "\7\0\1\17\1\0\1\17\6\0\23\17\1\163\4\17"+
    "\7\0\1\17\1\0\1\17\6\0\26\17\1\77\1\17"+
    "\7\0\1\17\1\0\1\17\6\0\5\17\1\243\22\17"+
    "\7\0\1\17\1\0\1\17\6\0\11\17\1\220\1\17"+
    "\1\244\14\17\7\0\1\17\1\0\1\17\6\0\13\17"+
    "\1\245\14\17\7\0\1\17\1\0\1\77\4\0\1\246"+
    "\1\0\1\17\6\77\21\17\11\0\1\246\4\0\1\246"+
    "\2\0\6\246\30\0\1\17\1\0\1\17\6\0\13\17"+
    "\1\247\14\17\7\0\1\17\1\0\1\17\6\0\21\17"+
    "\1\250\6\17\7\0\1\17\1\0\1\17\6\0\24\17"+
    "\1\251\3\17\7\0\1\17\1\0\1\17\6\0\5\17"+
    "\1\140\22\17\7\0\1\17\1\0\1\17\6\0\11\17"+
    "\1\252\16\17\7\0\1\17\1\0\1\17\6\0\17\17"+
    "\1\236\10\17\7\0\1\17\1\0\1\17\6\0\1\17"+
    "\1\253\26\17\7\0\1\17\1\0\1\17\6\0\23\17"+
    "\1\254\4\17\7\0\1\17\1\0\1\17\6\0\1\17"+
    "\1\255\26\17\7\0\1\17\1\0\1\17\6\0\11\17"+
    "\1\256\16\17\7\0\1\17\1\0\1\17\6\0\24\17"+
    "\1\137\3\17\7\0\1\17\1\0\1\17\6\0\1\17"+
    "\1\110\3\17\1\144\22\17\7\0\1\17\1\0\1\17"+
    "\6\0\21\17\1\257\6\17\7\0\1\17\1\0\1\17"+
    "\6\0\16\17\1\176\11\17\7\0\1\17\1\0\1\17"+
    "\6\0\23\17\1\237\4\17\7\0\1\17\1\0\1\17"+
    "\6\0\10\17\1\260\17\17\7\0\1\17\1\0\1\17"+
    "\6\0\23\17\1\261\4\17\7\0\1\17\1\0\1\17"+
    "\6\0\15\17\1\237\12\17\7\0\1\17\1\0\1\17"+
    "\6\0\17\17\1\262\10\17\7\0\1\17\1\0\1\17"+
    "\6\0\21\17\1\263\6\17\7\0\1\17\1\0\1\17"+
    "\6\0\5\17\1\202\22\17\7\0\1\17\1\0\1\17"+
    "\6\0\13\17\1\137\14\17\7\0\1\17\1\0\1\17"+
    "\6\0\16\17\1\264\11\17\7\0\1\17\1\0\1\17"+
    "\6\0\24\17\1\265\3\17\7\0\1\17\1\0\1\17"+
    "\6\0\7\17\1\266\20\17\7\0\1\17\1\0\1\17"+
    "\6\0\10\17\1\77\17\17\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6680];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\4\0\5\1\1\11\4\1\4\11\26\1\2\11"+
    "\1\1\1\11\3\1\1\11\2\1\2\11\5\1\1\0"+
    "\35\1\1\11\2\1\1\0\34\1\1\0\23\1\1\0"+
    "\15\1\1\0\12\1\1\11\20\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public MiniMessageLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiniMessageLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return PLAIN_TEXT;
            }
          // fall through
          case 19: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 20: break;
          case 3:
            { yybegin(TAG); return LT;
            }
          // fall through
          case 21: break;
          case 4:
            { return BAD_CHARACTER;
            }
          // fall through
          case 22: break;
          case 5:
            { return CUSTOM_TAG_NAME;
            }
          // fall through
          case 23: break;
          case 6:
            { return SLASH;
            }
          // fall through
          case 24: break;
          case 7:
            { yybegin(ARGUMENT_STATE); return COLON;
            }
          // fall through
          case 25: break;
          case 8:
            { return LT;
            }
          // fall through
          case 26: break;
          case 9:
            { yybegin(YYINITIAL); return GT;
            }
          // fall through
          case 27: break;
          case 10:
            { return TAG_NAME;
            }
          // fall through
          case 28: break;
          case 11:
            { yybegin(TAG); return ARGUMENT;
            }
          // fall through
          case 29: break;
          case 12:
            { yybegin(STRING_DOUBLE); return QUOTATION;
            }
          // fall through
          case 30: break;
          case 13:
            { yybegin(STRING_SINGLE); return QUOTATION;
            }
          // fall through
          case 31: break;
          case 14:
            { return STRING_TEXT;
            }
          // fall through
          case 32: break;
          case 15:
            { yybegin(TAG); return QUOTATION;
            }
          // fall through
          case 33: break;
          case 16:
            { yypushback(1); return PLAIN_TEXT;
            }
          // fall through
          case 34: break;
          case 17:
            { return ESCAPED_CHAR;
            }
          // fall through
          case 35: break;
          case 18:
            { return LEGACY_FORMATTING_CODE;
            }
          // fall through
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
