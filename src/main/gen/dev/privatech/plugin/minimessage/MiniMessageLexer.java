// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: MiniMessageLexer.flex

package dev.privatech.plugin.minimessage;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static dev.privatech.plugin.minimessage.psi.MiniMessageTypes.*;


public class MiniMessageLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TAG = 2;
  public static final int ARGUMENT_STATE = 4;
  public static final int STRING_DOUBLE = 6;
  public static final int STRING_SINGLE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\5\1\22\0\1\1\1\2\1\3\1\4\3\0"+
    "\1\5\5\0\1\6\1\0\1\7\12\10\1\11\1\0"+
    "\1\12\1\0\1\13\1\2\1\0\6\14\25\0\1\15"+
    "\2\0\1\16\1\0\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\6\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\6\1\45\1\6\12\0\1\1\32\0"+
    "\1\1\6\0\1\46\u01d8\0\1\1\177\0\13\1\35\0"+
    "\2\1\5\0\1\1\57\0\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\4\0\1\1\1\2\1\3\1\1\2\4\1\2"+
    "\2\4\1\5\1\6\1\7\1\10\1\11\1\5\2\12"+
    "\5\5\1\12\10\5\1\12\2\5\1\4\1\13\1\14"+
    "\1\15\1\16\3\15\2\1\1\17\1\20\1\21\1\5"+
    "\1\0\3\5\1\12\24\5\2\12\3\5\1\22\1\15"+
    "\1\5\1\0\16\5\1\12\4\5\1\12\10\5\1\0"+
    "\10\5\1\12\12\5\1\0\15\5\1\0\12\5\1\12"+
    "\20\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u01d4\0\u0186"+
    "\0\u0186\0\u0186\0\u0186\0\u0222\0\u0249\0\u0270\0\u0297\0\u02be"+
    "\0\u02e5\0\u030c\0\u0333\0\u035a\0\u0381\0\u03a8\0\u03cf\0\u03f6"+
    "\0\u041d\0\u0444\0\u046b\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e"+
    "\0\u0186\0\u052e\0\u0555\0\u0186\0\u057c\0\u05a3\0\u05ca\0\u0186"+
    "\0\u05f1\0\u0111\0\u0186\0\u0186\0\u0618\0\u063f\0\u0666\0\u068d"+
    "\0\u06b4\0\u01d4\0\u06db\0\u0702\0\u0729\0\u0750\0\u0777\0\u079e"+
    "\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0861\0\u0888\0\u08af\0\u08d6"+
    "\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999\0\u09c0\0\u09e7\0\u0a0e"+
    "\0\u0a35\0\u0a5c\0\u0a83\0\u052e\0\u0186\0\u0aaa\0\u0ad1\0\u0af8"+
    "\0\u0b1f\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2\0\u0c09\0\u0c30"+
    "\0\u0c57\0\u0c7e\0\u0ca5\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68"+
    "\0\u0d8f\0\u0db6\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0"+
    "\0\u0ec7\0\u0eee\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8"+
    "\0\u0fff\0\u1026\0\u104d\0\u1074\0\u109b\0\u10c2\0\u10e9\0\u1110"+
    "\0\u1137\0\u115e\0\u1185\0\u11ac\0\u11d3\0\u11fa\0\u1221\0\u1248"+
    "\0\u126f\0\u1296\0\u12bd\0\u12e4\0\u130b\0\u1332\0\u1359\0\u1380"+
    "\0\u13a7\0\u13ce\0\u13f5\0\u141c\0\u1443\0\u146a\0\u1491\0\u14b8"+
    "\0\u14df\0\u1506\0\u152d\0\u1554\0\u157b\0\u15a2\0\u15c9\0\u15f0"+
    "\0\u0186\0\u1617\0\u163e\0\u1665\0\u168c\0\u16b3\0\u16da\0\u1701"+
    "\0\u1728\0\u174f\0\u1776\0\u179d\0\u17c4\0\u17eb\0\u1812\0\u1839"+
    "\0\u1860";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\10\6\1\10\2\6\1\11\30\6\1\12"+
    "\1\13\1\14\1\15\1\13\1\16\1\13\1\17\1\20"+
    "\1\17\1\21\1\22\1\23\2\13\1\17\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\17\1\37\1\40\1\41\1\17\1\42\1\43"+
    "\1\44\1\45\1\17\1\46\1\47\1\13\1\50\1\13"+
    "\1\50\1\51\1\50\1\52\1\50\1\13\1\50\1\13"+
    "\1\50\1\13\33\50\3\53\1\54\11\53\1\55\31\53"+
    "\5\56\1\54\7\56\1\57\31\56\12\6\1\0\2\6"+
    "\1\0\30\6\1\0\1\6\1\7\10\6\1\0\2\6"+
    "\1\0\30\6\1\0\1\60\1\61\1\0\1\60\1\0"+
    "\1\60\3\0\1\60\1\62\3\60\30\0\13\60\1\63"+
    "\2\60\1\63\15\60\1\63\23\60\1\64\6\60\6\64"+
    "\3\60\5\64\2\60\1\64\7\60\50\0\1\14\53\0"+
    "\1\17\1\0\1\17\5\0\30\17\7\0\1\17\1\0"+
    "\1\65\3\0\1\66\1\0\1\17\6\65\21\17\7\0"+
    "\1\17\1\0\1\17\5\0\20\17\1\67\7\17\7\0"+
    "\1\17\1\0\1\17\5\0\13\17\1\70\2\17\1\71"+
    "\2\17\1\72\6\17\7\0\1\17\1\0\1\17\5\0"+
    "\13\17\1\73\2\17\1\74\11\17\7\0\1\17\1\0"+
    "\1\17\5\0\1\17\1\75\26\17\7\0\1\17\1\0"+
    "\1\17\5\0\14\17\1\72\13\17\7\0\1\17\1\0"+
    "\1\17\5\0\16\17\1\76\11\17\7\0\1\17\1\0"+
    "\1\17\5\0\16\17\1\71\2\17\1\77\6\17\7\0"+
    "\1\17\1\0\1\17\5\0\16\17\1\100\11\17\7\0"+
    "\1\17\1\0\1\17\5\0\15\17\1\101\5\17\1\102"+
    "\4\17\7\0\1\17\1\0\1\17\5\0\5\17\1\103"+
    "\22\17\7\0\1\17\1\0\1\17\5\0\1\17\1\104"+
    "\7\17\1\105\16\17\7\0\1\17\1\0\1\17\5\0"+
    "\2\17\1\106\2\17\1\107\22\17\7\0\1\17\1\0"+
    "\1\17\5\0\2\17\1\110\25\17\7\0\1\17\1\0"+
    "\1\17\5\0\21\17\1\111\6\17\7\0\1\17\1\0"+
    "\1\17\5\0\1\17\1\112\3\17\1\113\22\17\7\0"+
    "\1\17\1\0\1\17\5\0\3\17\1\114\1\17\1\115"+
    "\2\17\1\116\12\17\1\117\4\17\7\0\1\17\1\0"+
    "\1\17\5\0\21\17\1\120\6\17\7\0\1\17\1\0"+
    "\1\17\5\0\15\17\1\121\12\17\7\0\1\17\1\0"+
    "\1\17\5\0\10\17\1\122\17\17\7\0\1\17\1\0"+
    "\1\17\5\0\5\17\1\123\22\17\1\0\1\124\1\0"+
    "\5\124\1\0\1\124\1\0\1\124\1\0\33\124\3\53"+
    "\1\0\11\53\1\0\31\53\3\125\1\63\11\125\1\63"+
    "\15\125\1\63\13\125\5\56\1\0\7\56\1\0\31\56"+
    "\3\125\1\63\1\125\1\0\7\125\1\63\15\125\1\63"+
    "\13\125\1\0\1\61\53\0\1\17\1\0\1\126\3\0"+
    "\1\127\1\0\1\17\6\126\21\17\11\0\1\127\3\0"+
    "\1\127\2\0\6\127\30\0\1\17\1\0\1\17\5\0"+
    "\24\17\1\130\3\17\7\0\1\17\1\0\1\17\5\0"+
    "\1\17\1\131\22\17\1\132\3\17\7\0\1\17\1\0"+
    "\1\17\5\0\13\17\1\133\14\17\7\0\1\17\1\0"+
    "\1\17\5\0\11\17\1\131\16\17\7\0\1\17\1\0"+
    "\1\17\5\0\13\17\1\134\14\17\7\0\1\17\1\0"+
    "\1\17\5\0\21\17\1\135\1\17\1\130\4\17\7\0"+
    "\1\17\1\0\1\17\5\0\15\17\1\106\12\17\7\0"+
    "\1\17\1\0\1\17\5\0\1\17\1\136\3\17\1\137"+
    "\22\17\7\0\1\17\1\0\1\17\5\0\25\17\1\140"+
    "\2\17\7\0\1\17\1\0\1\17\5\0\22\17\1\141"+
    "\5\17\7\0\1\17\1\0\1\17\5\0\1\17\1\142"+
    "\26\17\7\0\1\17\1\0\1\17\5\0\27\17\1\72"+
    "\7\0\1\17\1\0\1\17\5\0\15\17\1\143\12\17"+
    "\7\0\1\17\1\0\1\17\5\0\7\17\1\144\20\17"+
    "\7\0\1\17\1\0\1\17\5\0\23\17\1\72\4\17"+
    "\7\0\1\17\1\0\1\17\5\0\26\17\1\145\1\17"+
    "\7\0\1\17\1\0\1\17\5\0\6\17\1\146\21\17"+
    "\7\0\1\17\1\0\1\17\5\0\11\17\1\147\16\17"+
    "\7\0\1\17\1\0\1\17\5\0\11\17\1\150\16\17"+
    "\7\0\1\17\1\0\1\17\5\0\4\17\1\72\15\17"+
    "\1\151\5\17\7\0\1\17\1\0\1\17\5\0\16\17"+
    "\1\152\11\17\7\0\1\17\1\0\1\17\5\0\13\17"+
    "\1\153\14\17\7\0\1\17\1\0\1\17\5\0\1\17"+
    "\1\154\26\17\7\0\1\17\1\0\1\17\5\0\21\17"+
    "\1\155\6\17\7\0\1\17\1\0\1\17\5\0\1\156"+
    "\1\157\26\17\7\0\1\17\1\0\1\17\5\0\4\17"+
    "\1\160\23\17\7\0\1\17\1\0\1\17\5\0\11\17"+
    "\1\161\16\17\7\0\1\17\1\0\1\17\5\0\13\17"+
    "\1\162\14\17\7\0\1\17\1\0\1\163\3\0\1\164"+
    "\1\0\1\17\6\163\21\17\11\0\1\164\3\0\1\164"+
    "\2\0\6\164\30\0\1\17\1\0\1\17\5\0\1\17"+
    "\1\72\26\17\7\0\1\17\1\0\1\17\5\0\3\17"+
    "\1\165\24\17\7\0\1\17\1\0\1\17\5\0\5\17"+
    "\1\72\22\17\7\0\1\17\1\0\1\17\5\0\4\17"+
    "\1\72\23\17\7\0\1\17\1\0\1\17\5\0\16\17"+
    "\1\166\11\17\7\0\1\17\1\0\1\17\5\0\12\17"+
    "\1\167\15\17\7\0\1\17\1\0\1\17\5\0\4\17"+
    "\1\170\22\17\1\72\7\0\1\17\1\0\1\17\5\0"+
    "\5\17\1\171\21\17\1\72\7\0\1\17\1\0\1\17"+
    "\5\0\5\17\1\172\22\17\7\0\1\17\1\0\1\17"+
    "\5\0\5\17\1\173\22\17\7\0\1\17\1\0\1\17"+
    "\5\0\13\17\1\174\14\17\7\0\1\17\1\0\1\17"+
    "\5\0\7\17\1\175\20\17\7\0\1\17\1\0\1\17"+
    "\5\0\10\17\1\176\17\17\7\0\1\17\1\0\1\17"+
    "\5\0\13\17\1\177\14\17\7\0\1\17\1\0\1\17"+
    "\5\0\24\17\1\200\3\17\7\0\1\17\1\0\1\17"+
    "\5\0\4\17\1\132\23\17\7\0\1\17\1\0\1\17"+
    "\5\0\15\17\1\201\12\17\7\0\1\17\1\0\1\17"+
    "\5\0\5\17\1\106\22\17\7\0\1\17\1\0\1\17"+
    "\5\0\21\17\1\132\6\17\7\0\1\17\1\0\1\17"+
    "\5\0\5\17\1\202\22\17\7\0\1\17\1\0\1\17"+
    "\5\0\4\17\1\203\23\17\7\0\1\17\1\0\1\17"+
    "\5\0\11\17\1\204\16\17\7\0\1\17\1\0\1\17"+
    "\5\0\16\17\1\172\11\17\7\0\1\17\1\0\1\17"+
    "\5\0\15\17\1\205\12\17\7\0\1\17\1\0\1\17"+
    "\5\0\5\17\1\206\22\17\7\0\1\17\1\0\1\17"+
    "\5\0\23\17\1\132\4\17\7\0\1\17\1\0\1\17"+
    "\5\0\13\17\1\203\14\17\7\0\1\17\1\0\1\207"+
    "\3\0\1\210\1\0\1\17\6\207\21\17\11\0\1\210"+
    "\3\0\1\210\2\0\6\210\30\0\1\17\1\0\1\17"+
    "\5\0\12\17\1\72\15\17\7\0\1\17\1\0\1\17"+
    "\5\0\21\17\1\72\2\17\1\172\3\17\7\0\1\17"+
    "\1\0\1\17\5\0\1\211\27\17\7\0\1\17\1\0"+
    "\1\17\5\0\11\17\1\212\16\17\7\0\1\17\1\0"+
    "\1\17\5\0\15\17\1\72\12\17\7\0\1\17\1\0"+
    "\1\17\5\0\21\17\1\72\6\17\7\0\1\17\1\0"+
    "\1\17\5\0\21\17\1\213\6\17\7\0\1\17\1\0"+
    "\1\17\5\0\11\17\1\214\16\17\7\0\1\17\1\0"+
    "\1\17\5\0\1\156\27\17\7\0\1\17\1\0\1\17"+
    "\5\0\23\17\1\215\4\17\7\0\1\17\1\0\1\17"+
    "\5\0\11\17\1\216\16\17\7\0\1\17\1\0\1\17"+
    "\5\0\22\17\1\217\5\17\7\0\1\17\1\0\1\17"+
    "\5\0\2\17\1\203\25\17\7\0\1\17\1\0\1\17"+
    "\5\0\3\17\1\220\24\17\7\0\1\17\1\0\1\17"+
    "\5\0\16\17\1\221\11\17\7\0\1\17\1\0\1\17"+
    "\5\0\12\17\1\222\15\17\7\0\1\17\1\0\1\17"+
    "\5\0\22\17\1\223\5\17\7\0\1\17\1\0\1\17"+
    "\5\0\21\17\1\224\6\17\7\0\1\17\1\0\1\225"+
    "\3\0\1\226\1\0\1\17\6\225\21\17\11\0\1\226"+
    "\3\0\1\226\2\0\6\226\30\0\1\17\1\0\1\17"+
    "\5\0\1\17\1\24\1\227\4\17\1\230\7\17\1\231"+
    "\1\17\1\232\6\17\7\0\1\17\1\0\1\17\5\0"+
    "\5\17\1\76\22\17\7\0\1\17\1\0\1\17\5\0"+
    "\23\17\1\233\4\17\7\0\1\17\1\0\1\17\5\0"+
    "\3\17\1\72\24\17\7\0\1\17\1\0\1\17\5\0"+
    "\1\234\27\17\7\0\1\17\1\0\1\17\5\0\15\17"+
    "\1\132\12\17\7\0\1\17\1\0\1\17\5\0\3\17"+
    "\1\235\24\17\7\0\1\17\1\0\1\17\5\0\23\17"+
    "\1\156\4\17\7\0\1\17\1\0\1\17\5\0\26\17"+
    "\1\72\1\17\7\0\1\17\1\0\1\17\5\0\5\17"+
    "\1\236\22\17\7\0\1\17\1\0\1\17\5\0\11\17"+
    "\1\213\1\17\1\237\14\17\7\0\1\17\1\0\1\17"+
    "\5\0\13\17\1\240\14\17\7\0\1\17\1\0\1\72"+
    "\3\0\1\241\1\0\1\17\6\72\21\17\11\0\1\241"+
    "\3\0\1\241\2\0\6\241\30\0\1\17\1\0\1\17"+
    "\5\0\13\17\1\242\14\17\7\0\1\17\1\0\1\17"+
    "\5\0\21\17\1\243\6\17\7\0\1\17\1\0\1\17"+
    "\5\0\24\17\1\244\3\17\7\0\1\17\1\0\1\17"+
    "\5\0\5\17\1\133\22\17\7\0\1\17\1\0\1\17"+
    "\5\0\11\17\1\245\16\17\7\0\1\17\1\0\1\17"+
    "\5\0\17\17\1\231\10\17\7\0\1\17\1\0\1\17"+
    "\5\0\1\17\1\246\26\17\7\0\1\17\1\0\1\17"+
    "\5\0\23\17\1\247\4\17\7\0\1\17\1\0\1\17"+
    "\5\0\1\17\1\250\26\17\7\0\1\17\1\0\1\17"+
    "\5\0\11\17\1\251\16\17\7\0\1\17\1\0\1\17"+
    "\5\0\24\17\1\132\3\17\7\0\1\17\1\0\1\17"+
    "\5\0\1\17\1\103\3\17\1\137\22\17\7\0\1\17"+
    "\1\0\1\17\5\0\21\17\1\252\6\17\7\0\1\17"+
    "\1\0\1\17\5\0\16\17\1\171\11\17\7\0\1\17"+
    "\1\0\1\17\5\0\23\17\1\232\4\17\7\0\1\17"+
    "\1\0\1\17\5\0\10\17\1\253\17\17\7\0\1\17"+
    "\1\0\1\17\5\0\23\17\1\254\4\17\7\0\1\17"+
    "\1\0\1\17\5\0\15\17\1\232\12\17\7\0\1\17"+
    "\1\0\1\17\5\0\17\17\1\255\10\17\7\0\1\17"+
    "\1\0\1\17\5\0\21\17\1\256\6\17\7\0\1\17"+
    "\1\0\1\17\5\0\5\17\1\175\22\17\7\0\1\17"+
    "\1\0\1\17\5\0\13\17\1\132\14\17\7\0\1\17"+
    "\1\0\1\17\5\0\16\17\1\257\11\17\7\0\1\17"+
    "\1\0\1\17\5\0\24\17\1\260\3\17\7\0\1\17"+
    "\1\0\1\17\5\0\7\17\1\261\20\17\7\0\1\17"+
    "\1\0\1\17\5\0\10\17\1\72\17\17\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6279];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\4\0\5\1\1\11\4\1\4\11\25\1\1\11"+
    "\2\1\1\11\3\1\1\11\2\1\2\11\1\1\1\0"+
    "\36\1\1\11\1\1\1\0\34\1\1\0\23\1\1\0"+
    "\15\1\1\0\12\1\1\11\20\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public MiniMessageLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiniMessageLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return PLAIN_TEXT;
            }
          // fall through
          case 19: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 20: break;
          case 3:
            { yybegin(TAG); return LT;
            }
          // fall through
          case 21: break;
          case 4:
            { return BAD_CHARACTER;
            }
          // fall through
          case 22: break;
          case 5:
            { return CUSTOM_TAG_NAME;
            }
          // fall through
          case 23: break;
          case 6:
            { return SLASH;
            }
          // fall through
          case 24: break;
          case 7:
            { yybegin(ARGUMENT_STATE); return COLON;
            }
          // fall through
          case 25: break;
          case 8:
            { return LT;
            }
          // fall through
          case 26: break;
          case 9:
            { yybegin(YYINITIAL); return GT;
            }
          // fall through
          case 27: break;
          case 10:
            { return TAG_NAME;
            }
          // fall through
          case 28: break;
          case 11:
            { yybegin(STRING_DOUBLE); return QUOTATION;
            }
          // fall through
          case 29: break;
          case 12:
            { yybegin(STRING_SINGLE); return QUOTATION;
            }
          // fall through
          case 30: break;
          case 13:
            { return STRING_TEXT;
            }
          // fall through
          case 31: break;
          case 14:
            { yybegin(TAG); return QUOTATION;
            }
          // fall through
          case 32: break;
          case 15:
            { yypushback(1); return PLAIN_TEXT;
            }
          // fall through
          case 33: break;
          case 16:
            { return ESCAPED_CHAR;
            }
          // fall through
          case 34: break;
          case 17:
            { return LEGACY_FORMATTING_CODE;
            }
          // fall through
          case 35: break;
          case 18:
            { yybegin(TAG); return ARGUMENT;
            }
          // fall through
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
