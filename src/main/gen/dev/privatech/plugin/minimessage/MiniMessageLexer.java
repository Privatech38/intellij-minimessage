// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: MiniMessageLexer.flex

package dev.privatech.plugin.minimessage;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static dev.privatech.plugin.minimessage.psi.MiniMessageTypes.*;


public class MiniMessageLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TAG = 2;
  public static final int ARGUMENT_STATE = 4;
  public static final int STRING_DOUBLE = 6;
  public static final int STRING_SINGLE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\4\1\5"+
    "\3\0\1\6\5\0\1\7\1\0\1\10\12\11\1\12"+
    "\1\0\1\13\1\0\1\14\1\3\1\0\6\15\25\0"+
    "\1\16\2\0\1\17\1\0\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\7\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\7\1\46\1\7\12\0\1\2"+
    "\32\0\1\1\6\0\1\47\u01d8\0\1\1\177\0\13\1"+
    "\35\0\2\2\5\0\1\1\57\0\1\1\240\0\1\1"+
    "\377\0\u0100\50";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\4\0\1\1\1\2\1\3\1\1\2\4\1\2"+
    "\2\4\1\5\1\6\1\7\1\10\1\11\1\5\2\12"+
    "\5\5\1\12\10\5\1\12\2\5\1\4\1\13\1\14"+
    "\1\15\1\16\2\15\2\1\1\17\2\20\1\21\1\5"+
    "\1\0\3\5\1\12\24\5\2\12\3\5\1\22\1\5"+
    "\1\0\16\5\1\12\4\5\1\12\10\5\1\0\10\5"+
    "\1\12\12\5\1\0\15\5\1\0\12\5\1\12\20\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u01ec\0\u019a"+
    "\0\u019a\0\u019a\0\u019a\0\u023e\0\u0267\0\u0290\0\u02b9\0\u02e2"+
    "\0\u030b\0\u0334\0\u035d\0\u0386\0\u03af\0\u03d8\0\u0401\0\u042a"+
    "\0\u0453\0\u047c\0\u04a5\0\u04ce\0\u04f7\0\u0520\0\u0549\0\u0572"+
    "\0\u019a\0\u0572\0\u059b\0\u019a\0\u05c4\0\u05ed\0\u019a\0\u0616"+
    "\0\u011f\0\315\0\u019a\0\u019a\0\u063f\0\u0668\0\u0691\0\u06ba"+
    "\0\u06e3\0\u01ec\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9"+
    "\0\u0802\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921"+
    "\0\u094a\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u0a40\0\u0a69"+
    "\0\u0a92\0\u0abb\0\u0ae4\0\u0572\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88"+
    "\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0"+
    "\0\u0cf9\0\u0d22\0\u0d4b\0\u0d74\0\u0d9d\0\u0dc6\0\u0def\0\u0e18"+
    "\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60"+
    "\0\u0f89\0\u0fb2\0\u0fdb\0\u1004\0\u102d\0\u1056\0\u107f\0\u10a8"+
    "\0\u10d1\0\u10fa\0\u1123\0\u114c\0\u1175\0\u119e\0\u11c7\0\u11f0"+
    "\0\u1219\0\u1242\0\u126b\0\u1294\0\u12bd\0\u12e6\0\u130f\0\u1338"+
    "\0\u1361\0\u138a\0\u13b3\0\u13dc\0\u1405\0\u142e\0\u1457\0\u1480"+
    "\0\u14a9\0\u14d2\0\u14fb\0\u1524\0\u154d\0\u1576\0\u159f\0\u15c8"+
    "\0\u15f1\0\u161a\0\u1643\0\u166c\0\u1695\0\u16be\0\u16e7\0\u019a"+
    "\0\u1710\0\u1739\0\u1762\0\u178b\0\u17b4\0\u17dd\0\u1806\0\u182f"+
    "\0\u1858\0\u1881\0\u18aa\0\u18d3\0\u18fc\0\u1925\0\u194e\0\u1977";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\2\7\10\6\1\10\2\6\1\11\30\6\1\12"+
    "\1\6\1\13\2\14\1\15\1\13\1\16\1\13\1\17"+
    "\1\20\1\17\1\21\1\22\1\23\2\13\1\17\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\17\1\37\1\40\1\41\1\17\1\42"+
    "\1\43\1\44\1\45\1\17\1\46\1\47\2\13\1\50"+
    "\2\13\1\50\1\51\1\50\1\52\1\50\1\13\1\50"+
    "\1\13\1\50\1\13\34\50\4\53\1\54\11\53\1\55"+
    "\32\53\6\56\1\54\7\56\1\55\32\56\13\6\1\0"+
    "\33\6\1\0\2\6\2\7\10\6\1\0\33\6\1\0"+
    "\1\6\1\57\2\60\1\0\1\57\1\0\1\57\3\0"+
    "\1\57\1\61\3\57\30\0\2\57\2\62\1\6\10\62"+
    "\1\63\33\62\1\63\1\6\11\57\1\64\6\57\6\64"+
    "\3\57\5\64\2\57\1\64\10\57\52\0\2\14\55\0"+
    "\1\17\1\0\1\17\5\0\30\17\11\0\1\17\1\0"+
    "\1\65\3\0\1\66\1\0\1\17\6\65\21\17\11\0"+
    "\1\17\1\0\1\17\5\0\20\17\1\67\7\17\11\0"+
    "\1\17\1\0\1\17\5\0\13\17\1\70\2\17\1\71"+
    "\2\17\1\72\6\17\11\0\1\17\1\0\1\17\5\0"+
    "\13\17\1\73\2\17\1\74\11\17\11\0\1\17\1\0"+
    "\1\17\5\0\1\17\1\75\26\17\11\0\1\17\1\0"+
    "\1\17\5\0\14\17\1\72\13\17\11\0\1\17\1\0"+
    "\1\17\5\0\16\17\1\76\11\17\11\0\1\17\1\0"+
    "\1\17\5\0\16\17\1\71\2\17\1\77\6\17\11\0"+
    "\1\17\1\0\1\17\5\0\16\17\1\100\11\17\11\0"+
    "\1\17\1\0\1\17\5\0\15\17\1\101\5\17\1\102"+
    "\4\17\11\0\1\17\1\0\1\17\5\0\5\17\1\103"+
    "\22\17\11\0\1\17\1\0\1\17\5\0\1\17\1\104"+
    "\7\17\1\105\16\17\11\0\1\17\1\0\1\17\5\0"+
    "\2\17\1\106\2\17\1\107\22\17\11\0\1\17\1\0"+
    "\1\17\5\0\2\17\1\110\25\17\11\0\1\17\1\0"+
    "\1\17\5\0\21\17\1\111\6\17\11\0\1\17\1\0"+
    "\1\17\5\0\1\17\1\112\3\17\1\113\22\17\11\0"+
    "\1\17\1\0\1\17\5\0\3\17\1\114\1\17\1\115"+
    "\2\17\1\116\12\17\1\117\4\17\11\0\1\17\1\0"+
    "\1\17\5\0\21\17\1\120\6\17\11\0\1\17\1\0"+
    "\1\17\5\0\15\17\1\121\12\17\11\0\1\17\1\0"+
    "\1\17\5\0\10\17\1\122\17\17\11\0\1\17\1\0"+
    "\1\17\5\0\5\17\1\123\22\17\2\0\1\124\2\0"+
    "\5\124\1\0\1\124\1\0\1\124\1\0\34\124\4\53"+
    "\1\0\11\53\1\0\32\53\2\63\1\0\45\63\1\0"+
    "\6\56\1\0\7\56\1\0\32\56\1\0\2\60\55\0"+
    "\1\17\1\0\1\125\3\0\1\126\1\0\1\17\6\125"+
    "\21\17\13\0\1\126\3\0\1\126\2\0\6\126\32\0"+
    "\1\17\1\0\1\17\5\0\24\17\1\127\3\17\11\0"+
    "\1\17\1\0\1\17\5\0\1\17\1\130\22\17\1\131"+
    "\3\17\11\0\1\17\1\0\1\17\5\0\13\17\1\132"+
    "\14\17\11\0\1\17\1\0\1\17\5\0\11\17\1\130"+
    "\16\17\11\0\1\17\1\0\1\17\5\0\13\17\1\133"+
    "\14\17\11\0\1\17\1\0\1\17\5\0\21\17\1\134"+
    "\1\17\1\127\4\17\11\0\1\17\1\0\1\17\5\0"+
    "\15\17\1\106\12\17\11\0\1\17\1\0\1\17\5\0"+
    "\1\17\1\135\3\17\1\136\22\17\11\0\1\17\1\0"+
    "\1\17\5\0\25\17\1\137\2\17\11\0\1\17\1\0"+
    "\1\17\5\0\22\17\1\140\5\17\11\0\1\17\1\0"+
    "\1\17\5\0\1\17\1\141\26\17\11\0\1\17\1\0"+
    "\1\17\5\0\27\17\1\72\11\0\1\17\1\0\1\17"+
    "\5\0\15\17\1\142\12\17\11\0\1\17\1\0\1\17"+
    "\5\0\7\17\1\143\20\17\11\0\1\17\1\0\1\17"+
    "\5\0\23\17\1\72\4\17\11\0\1\17\1\0\1\17"+
    "\5\0\26\17\1\144\1\17\11\0\1\17\1\0\1\17"+
    "\5\0\6\17\1\145\21\17\11\0\1\17\1\0\1\17"+
    "\5\0\11\17\1\146\16\17\11\0\1\17\1\0\1\17"+
    "\5\0\11\17\1\147\16\17\11\0\1\17\1\0\1\17"+
    "\5\0\4\17\1\72\15\17\1\150\5\17\11\0\1\17"+
    "\1\0\1\17\5\0\16\17\1\151\11\17\11\0\1\17"+
    "\1\0\1\17\5\0\13\17\1\152\14\17\11\0\1\17"+
    "\1\0\1\17\5\0\1\17\1\153\26\17\11\0\1\17"+
    "\1\0\1\17\5\0\21\17\1\154\6\17\11\0\1\17"+
    "\1\0\1\17\5\0\1\155\1\156\26\17\11\0\1\17"+
    "\1\0\1\17\5\0\4\17\1\157\23\17\11\0\1\17"+
    "\1\0\1\17\5\0\11\17\1\160\16\17\11\0\1\17"+
    "\1\0\1\17\5\0\13\17\1\161\14\17\11\0\1\17"+
    "\1\0\1\162\3\0\1\163\1\0\1\17\6\162\21\17"+
    "\13\0\1\163\3\0\1\163\2\0\6\163\32\0\1\17"+
    "\1\0\1\17\5\0\1\17\1\72\26\17\11\0\1\17"+
    "\1\0\1\17\5\0\3\17\1\164\24\17\11\0\1\17"+
    "\1\0\1\17\5\0\5\17\1\72\22\17\11\0\1\17"+
    "\1\0\1\17\5\0\4\17\1\72\23\17\11\0\1\17"+
    "\1\0\1\17\5\0\16\17\1\165\11\17\11\0\1\17"+
    "\1\0\1\17\5\0\12\17\1\166\15\17\11\0\1\17"+
    "\1\0\1\17\5\0\4\17\1\167\22\17\1\72\11\0"+
    "\1\17\1\0\1\17\5\0\5\17\1\170\21\17\1\72"+
    "\11\0\1\17\1\0\1\17\5\0\5\17\1\171\22\17"+
    "\11\0\1\17\1\0\1\17\5\0\5\17\1\172\22\17"+
    "\11\0\1\17\1\0\1\17\5\0\13\17\1\173\14\17"+
    "\11\0\1\17\1\0\1\17\5\0\7\17\1\174\20\17"+
    "\11\0\1\17\1\0\1\17\5\0\10\17\1\175\17\17"+
    "\11\0\1\17\1\0\1\17\5\0\13\17\1\176\14\17"+
    "\11\0\1\17\1\0\1\17\5\0\24\17\1\177\3\17"+
    "\11\0\1\17\1\0\1\17\5\0\4\17\1\131\23\17"+
    "\11\0\1\17\1\0\1\17\5\0\15\17\1\200\12\17"+
    "\11\0\1\17\1\0\1\17\5\0\5\17\1\106\22\17"+
    "\11\0\1\17\1\0\1\17\5\0\21\17\1\131\6\17"+
    "\11\0\1\17\1\0\1\17\5\0\5\17\1\201\22\17"+
    "\11\0\1\17\1\0\1\17\5\0\4\17\1\202\23\17"+
    "\11\0\1\17\1\0\1\17\5\0\11\17\1\203\16\17"+
    "\11\0\1\17\1\0\1\17\5\0\16\17\1\171\11\17"+
    "\11\0\1\17\1\0\1\17\5\0\15\17\1\204\12\17"+
    "\11\0\1\17\1\0\1\17\5\0\5\17\1\205\22\17"+
    "\11\0\1\17\1\0\1\17\5\0\23\17\1\131\4\17"+
    "\11\0\1\17\1\0\1\17\5\0\13\17\1\202\14\17"+
    "\11\0\1\17\1\0\1\206\3\0\1\207\1\0\1\17"+
    "\6\206\21\17\13\0\1\207\3\0\1\207\2\0\6\207"+
    "\32\0\1\17\1\0\1\17\5\0\12\17\1\72\15\17"+
    "\11\0\1\17\1\0\1\17\5\0\21\17\1\72\2\17"+
    "\1\171\3\17\11\0\1\17\1\0\1\17\5\0\1\210"+
    "\27\17\11\0\1\17\1\0\1\17\5\0\11\17\1\211"+
    "\16\17\11\0\1\17\1\0\1\17\5\0\15\17\1\72"+
    "\12\17\11\0\1\17\1\0\1\17\5\0\21\17\1\72"+
    "\6\17\11\0\1\17\1\0\1\17\5\0\21\17\1\212"+
    "\6\17\11\0\1\17\1\0\1\17\5\0\11\17\1\213"+
    "\16\17\11\0\1\17\1\0\1\17\5\0\1\155\27\17"+
    "\11\0\1\17\1\0\1\17\5\0\23\17\1\214\4\17"+
    "\11\0\1\17\1\0\1\17\5\0\11\17\1\215\16\17"+
    "\11\0\1\17\1\0\1\17\5\0\22\17\1\216\5\17"+
    "\11\0\1\17\1\0\1\17\5\0\2\17\1\202\25\17"+
    "\11\0\1\17\1\0\1\17\5\0\3\17\1\217\24\17"+
    "\11\0\1\17\1\0\1\17\5\0\16\17\1\220\11\17"+
    "\11\0\1\17\1\0\1\17\5\0\12\17\1\221\15\17"+
    "\11\0\1\17\1\0\1\17\5\0\22\17\1\222\5\17"+
    "\11\0\1\17\1\0\1\17\5\0\21\17\1\223\6\17"+
    "\11\0\1\17\1\0\1\224\3\0\1\225\1\0\1\17"+
    "\6\224\21\17\13\0\1\225\3\0\1\225\2\0\6\225"+
    "\32\0\1\17\1\0\1\17\5\0\1\17\1\24\1\226"+
    "\4\17\1\227\7\17\1\230\1\17\1\231\6\17\11\0"+
    "\1\17\1\0\1\17\5\0\5\17\1\76\22\17\11\0"+
    "\1\17\1\0\1\17\5\0\23\17\1\232\4\17\11\0"+
    "\1\17\1\0\1\17\5\0\3\17\1\72\24\17\11\0"+
    "\1\17\1\0\1\17\5\0\1\233\27\17\11\0\1\17"+
    "\1\0\1\17\5\0\15\17\1\131\12\17\11\0\1\17"+
    "\1\0\1\17\5\0\3\17\1\234\24\17\11\0\1\17"+
    "\1\0\1\17\5\0\23\17\1\155\4\17\11\0\1\17"+
    "\1\0\1\17\5\0\26\17\1\72\1\17\11\0\1\17"+
    "\1\0\1\17\5\0\5\17\1\235\22\17\11\0\1\17"+
    "\1\0\1\17\5\0\11\17\1\212\1\17\1\236\14\17"+
    "\11\0\1\17\1\0\1\17\5\0\13\17\1\237\14\17"+
    "\11\0\1\17\1\0\1\72\3\0\1\240\1\0\1\17"+
    "\6\72\21\17\13\0\1\240\3\0\1\240\2\0\6\240"+
    "\32\0\1\17\1\0\1\17\5\0\13\17\1\241\14\17"+
    "\11\0\1\17\1\0\1\17\5\0\21\17\1\242\6\17"+
    "\11\0\1\17\1\0\1\17\5\0\24\17\1\243\3\17"+
    "\11\0\1\17\1\0\1\17\5\0\5\17\1\132\22\17"+
    "\11\0\1\17\1\0\1\17\5\0\11\17\1\244\16\17"+
    "\11\0\1\17\1\0\1\17\5\0\17\17\1\230\10\17"+
    "\11\0\1\17\1\0\1\17\5\0\1\17\1\245\26\17"+
    "\11\0\1\17\1\0\1\17\5\0\23\17\1\246\4\17"+
    "\11\0\1\17\1\0\1\17\5\0\1\17\1\247\26\17"+
    "\11\0\1\17\1\0\1\17\5\0\11\17\1\250\16\17"+
    "\11\0\1\17\1\0\1\17\5\0\24\17\1\131\3\17"+
    "\11\0\1\17\1\0\1\17\5\0\1\17\1\103\3\17"+
    "\1\136\22\17\11\0\1\17\1\0\1\17\5\0\21\17"+
    "\1\251\6\17\11\0\1\17\1\0\1\17\5\0\16\17"+
    "\1\170\11\17\11\0\1\17\1\0\1\17\5\0\23\17"+
    "\1\231\4\17\11\0\1\17\1\0\1\17\5\0\10\17"+
    "\1\252\17\17\11\0\1\17\1\0\1\17\5\0\23\17"+
    "\1\253\4\17\11\0\1\17\1\0\1\17\5\0\15\17"+
    "\1\231\12\17\11\0\1\17\1\0\1\17\5\0\17\17"+
    "\1\254\10\17\11\0\1\17\1\0\1\17\5\0\21\17"+
    "\1\255\6\17\11\0\1\17\1\0\1\17\5\0\5\17"+
    "\1\174\22\17\11\0\1\17\1\0\1\17\5\0\13\17"+
    "\1\131\14\17\11\0\1\17\1\0\1\17\5\0\16\17"+
    "\1\256\11\17\11\0\1\17\1\0\1\17\5\0\24\17"+
    "\1\257\3\17\11\0\1\17\1\0\1\17\5\0\7\17"+
    "\1\260\20\17\11\0\1\17\1\0\1\17\5\0\10\17"+
    "\1\72\17\17\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6560];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\4\0\5\1\1\11\4\1\4\11\25\1\1\11"+
    "\2\1\1\11\2\1\1\11\3\1\2\11\1\1\1\0"+
    "\37\1\1\0\34\1\1\0\23\1\1\0\15\1\1\0"+
    "\12\1\1\11\20\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public MiniMessageLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiniMessageLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return PLAIN_TEXT;
            }
          // fall through
          case 19: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 20: break;
          case 3:
            { yybegin(TAG); return LT;
            }
          // fall through
          case 21: break;
          case 4:
            { return BAD_CHARACTER;
            }
          // fall through
          case 22: break;
          case 5:
            { return CUSTOM_TAG_NAME;
            }
          // fall through
          case 23: break;
          case 6:
            { return SLASH;
            }
          // fall through
          case 24: break;
          case 7:
            { yybegin(ARGUMENT_STATE); return COLON;
            }
          // fall through
          case 25: break;
          case 8:
            { return LT;
            }
          // fall through
          case 26: break;
          case 9:
            { yybegin(YYINITIAL); return GT;
            }
          // fall through
          case 27: break;
          case 10:
            { return TAG_NAME;
            }
          // fall through
          case 28: break;
          case 11:
            { yybegin(STRING_DOUBLE); return QUOTATION;
            }
          // fall through
          case 29: break;
          case 12:
            { yybegin(STRING_SINGLE); return QUOTATION;
            }
          // fall through
          case 30: break;
          case 13:
            { return STRING_TEXT;
            }
          // fall through
          case 31: break;
          case 14:
            { yybegin(TAG); return QUOTATION;
            }
          // fall through
          case 32: break;
          case 15:
            { yypushback(1); return PLAIN_TEXT;
            }
          // fall through
          case 33: break;
          case 16:
            { return ESCAPED_CHAR;
            }
          // fall through
          case 34: break;
          case 17:
            { return LEGACY_FORMATTING_CODE;
            }
          // fall through
          case 35: break;
          case 18:
            { yybegin(TAG); return ARGUMENT;
            }
          // fall through
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
