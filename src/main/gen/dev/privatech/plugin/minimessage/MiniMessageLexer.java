// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: MiniMessageLexer.flex

package dev.privatech.plugin.minimessage;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static dev.privatech.plugin.minimessage.psi.MiniMessageTypes.*;


public class MiniMessageLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TAG = 2;
  public static final int ARGUMENT_START_STATE = 4;
  public static final int ARGUMENT_STATE = 6;
  public static final int STRING_DOUBLE = 8;
  public static final int STRING_SINGLE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\4\1\5"+
    "\3\0\1\6\5\0\1\7\1\0\1\10\12\11\1\12"+
    "\1\0\1\13\1\0\1\14\1\15\1\0\6\16\25\0"+
    "\1\17\2\0\1\20\1\0\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\7\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\7\1\47\1\7\12\0\1\2"+
    "\32\0\1\1\6\0\1\50\u01d8\0\1\1\177\0\13\1"+
    "\35\0\2\2\5\0\1\1\57\0\1\1\240\0\1\1"+
    "\377\0\u0100\51";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\5\0\1\1\1\2\1\3\1\1\2\4\1\2"+
    "\2\4\1\5\1\6\1\7\1\10\1\11\1\4\1\5"+
    "\2\12\5\5\1\12\10\5\1\12\2\5\1\13\1\14"+
    "\1\15\1\13\1\16\1\3\1\13\3\17\1\20\1\21"+
    "\3\20\2\1\2\0\1\22\1\23\1\24\2\12\3\5"+
    "\1\0\3\5\1\12\26\5\2\12\3\5\1\25\1\26"+
    "\2\17\1\20\1\0\1\22\2\5\1\0\16\5\1\12"+
    "\4\5\1\12\7\5\3\0\1\5\1\0\10\5\1\12"+
    "\11\5\1\0\1\22\2\0\1\22\1\0\1\5\1\0"+
    "\14\5\3\0\1\5\1\0\12\5\1\22\1\0\1\12"+
    "\10\5\1\0\10\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c\0\u0276"+
    "\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u0276\0\u02a0\0\u02ca\0\u02f4"+
    "\0\u031e\0\u0348\0\u0372\0\u039c\0\u03c6\0\u03f0\0\u041a\0\u0444"+
    "\0\u046e\0\u0498\0\u04c2\0\u04ec\0\u0516\0\u0540\0\u056a\0\u0594"+
    "\0\u05be\0\u01ce\0\u01ce\0\u01ce\0\u05e8\0\u01ce\0\u01ce\0\u0612"+
    "\0\u063c\0\u0666\0\u0690\0\u06ba\0\u01ce\0\u06e4\0\u070e\0\u0738"+
    "\0\u01ce\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u01ce\0\u01ce\0\u080a"+
    "\0\u0834\0\u085e\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u0930\0\u095a"+
    "\0\u0276\0\u0984\0\u09ae\0\u09d8\0\u0a02\0\u0a2c\0\u0a56\0\u0a80"+
    "\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0"+
    "\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20"+
    "\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u01ce\0\u01ce\0\u01ce\0\u05e8"+
    "\0\u01ce\0\u0df2\0\u01ce\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a\0\u0ec4"+
    "\0\u0eee\0\u0f18\0\u0f42\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea\0\u1014"+
    "\0\u103e\0\u1068\0\u1092\0\u10bc\0\u10e6\0\u1110\0\u113a\0\u1164"+
    "\0\u118e\0\u11b8\0\u11e2\0\u120c\0\u1236\0\u1260\0\u128a\0\u12b4"+
    "\0\u12de\0\u1308\0\u1332\0\u135c\0\u1386\0\u13b0\0\u13da\0\u1404"+
    "\0\u142e\0\u1458\0\u1482\0\u14ac\0\u14d6\0\u1500\0\u152a\0\u1554"+
    "\0\u157e\0\u15a8\0\u15d2\0\u15fc\0\u1626\0\u1650\0\u167a\0\u16a4"+
    "\0\u16ce\0\u16f8\0\u16f8\0\u1722\0\u174c\0\u174c\0\u1776\0\u17a0"+
    "\0\u17ca\0\u17f4\0\u181e\0\u1848\0\u1872\0\u189c\0\u18c6\0\u18f0"+
    "\0\u191a\0\u1944\0\u196e\0\u1998\0\u19c2\0\u19ec\0\u1a16\0\u1a40"+
    "\0\u1a6a\0\u1a94\0\u1abe\0\u1ae8\0\u1b12\0\u1b3c\0\u1b66\0\u1b90"+
    "\0\u1bba\0\u1be4\0\u1c0e\0\u1c38\0\u1c38\0\u01ce\0\u1c62\0\u1c8c"+
    "\0\u1cb6\0\u1ce0\0\u1d0a\0\u1d34\0\u1d5e\0\u1d88\0\u1db2\0\u1ddc"+
    "\0\u1e06\0\u1e30\0\u1e5a\0\u1e84\0\u1eae\0\u1ed8\0\u1f02";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\2\10\10\7\1\11\3\7\1\12\30\7\1\13"+
    "\1\7\1\14\2\15\1\16\1\14\1\17\1\14\1\20"+
    "\1\21\1\20\1\22\1\23\1\24\1\25\2\14\1\20"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\20\1\41\1\42\1\43\1\20"+
    "\1\44\1\45\1\46\1\47\1\20\1\50\1\51\2\14"+
    "\4\52\1\53\1\52\1\54\1\52\1\55\1\52\1\56"+
    "\1\57\1\56\2\52\1\60\32\52\10\61\1\62\1\61"+
    "\1\56\1\57\1\56\2\61\1\63\32\61\4\64\1\65"+
    "\12\64\1\66\32\64\6\67\1\65\10\67\1\70\32\67"+
    "\13\7\1\0\3\7\1\0\30\7\1\0\2\7\2\10"+
    "\10\7\1\0\3\7\1\0\30\7\1\0\1\7\1\71"+
    "\2\72\1\73\1\71\1\73\1\71\1\74\1\0\1\74"+
    "\1\71\1\75\1\71\1\73\2\71\30\74\15\71\1\76"+
    "\3\71\1\76\15\71\1\76\25\71\1\77\7\71\6\77"+
    "\3\71\5\77\2\71\1\77\10\71\53\0\2\15\56\0"+
    "\1\20\1\0\1\20\6\0\2\20\1\100\2\20\1\32"+
    "\3\20\1\101\4\20\1\42\2\20\1\102\1\103\1\20"+
    "\1\47\3\20\11\0\1\20\1\0\1\104\4\0\1\105"+
    "\1\0\1\20\6\104\21\20\11\0\1\20\1\0\1\20"+
    "\6\0\30\20\11\0\1\20\1\0\1\20\6\0\20\20"+
    "\1\106\7\20\11\0\1\20\1\0\1\20\6\0\13\20"+
    "\1\107\2\20\1\110\2\20\1\111\6\20\11\0\1\20"+
    "\1\0\1\20\6\0\13\20\1\112\2\20\1\113\11\20"+
    "\11\0\1\20\1\0\1\20\6\0\1\20\1\114\26\20"+
    "\11\0\1\20\1\0\1\20\6\0\14\20\1\111\13\20"+
    "\11\0\1\20\1\0\1\20\6\0\16\20\1\115\11\20"+
    "\11\0\1\20\1\0\1\20\6\0\16\20\1\110\2\20"+
    "\1\116\6\20\11\0\1\20\1\0\1\20\6\0\5\20"+
    "\1\117\10\20\1\120\11\20\11\0\1\20\1\0\1\20"+
    "\6\0\15\20\1\121\5\20\1\122\4\20\11\0\1\20"+
    "\1\0\1\20\6\0\5\20\1\123\22\20\11\0\1\20"+
    "\1\0\1\20\6\0\1\20\1\124\7\20\1\125\16\20"+
    "\11\0\1\20\1\0\1\20\6\0\2\20\1\126\2\20"+
    "\1\127\22\20\11\0\1\20\1\0\1\20\6\0\2\20"+
    "\1\130\25\20\11\0\1\20\1\0\1\20\6\0\21\20"+
    "\1\131\6\20\11\0\1\20\1\0\1\20\6\0\1\20"+
    "\1\132\3\20\1\133\22\20\11\0\1\20\1\0\1\20"+
    "\6\0\3\20\1\134\1\20\1\135\2\20\1\136\6\20"+
    "\1\137\3\20\1\140\4\20\11\0\1\20\1\0\1\20"+
    "\6\0\21\20\1\141\6\20\11\0\1\20\1\0\1\20"+
    "\6\0\15\20\1\142\12\20\11\0\1\20\1\0\1\20"+
    "\6\0\10\20\1\143\17\20\11\0\1\20\1\0\1\20"+
    "\6\0\5\20\1\144\22\20\16\0\1\145\54\0\1\146"+
    "\15\0\1\146\14\0\10\61\1\62\1\61\3\0\2\61"+
    "\1\0\42\61\1\62\1\61\2\0\1\145\2\61\1\0"+
    "\32\61\10\147\1\150\1\147\3\0\2\147\1\76\15\147"+
    "\1\76\14\147\4\64\1\0\12\64\1\0\32\64\4\151"+
    "\1\76\12\151\1\76\15\151\1\76\14\151\6\67\1\0"+
    "\10\67\1\0\32\67\6\151\1\76\10\151\1\76\15\151"+
    "\1\76\14\151\1\0\2\72\56\0\1\74\1\0\1\74"+
    "\6\0\30\74\11\0\1\74\1\0\1\74\1\152\1\153"+
    "\4\0\30\74\2\0\1\71\2\72\1\0\1\71\1\0"+
    "\1\71\3\0\1\71\1\75\1\71\1\0\2\71\30\0"+
    "\2\71\7\0\1\20\1\0\1\20\6\0\16\20\1\110"+
    "\11\20\11\0\1\20\1\0\1\20\6\0\23\20\1\122"+
    "\4\20\11\0\1\20\1\0\1\20\6\0\5\20\1\154"+
    "\22\20\11\0\1\20\1\0\1\20\6\0\10\20\1\136"+
    "\12\20\1\140\4\20\11\0\1\20\1\0\1\155\4\0"+
    "\1\156\1\0\1\20\6\155\21\20\13\0\1\156\4\0"+
    "\1\156\2\0\6\156\32\0\1\20\1\0\1\20\6\0"+
    "\24\20\1\157\3\20\11\0\1\20\1\0\1\20\6\0"+
    "\1\20\1\160\22\20\1\161\3\20\11\0\1\20\1\0"+
    "\1\20\6\0\13\20\1\162\14\20\11\0\1\20\1\0"+
    "\1\20\6\0\11\20\1\160\16\20\11\0\1\20\1\0"+
    "\1\20\6\0\13\20\1\163\14\20\11\0\1\20\1\0"+
    "\1\20\6\0\21\20\1\164\1\20\1\157\4\20\11\0"+
    "\1\20\1\0\1\20\6\0\15\20\1\126\12\20\11\0"+
    "\1\20\1\0\1\20\6\0\1\20\1\165\3\20\1\166"+
    "\22\20\11\0\1\20\1\0\1\20\6\0\1\20\1\162"+
    "\26\20\11\0\1\20\1\0\1\20\6\0\25\20\1\167"+
    "\2\20\11\0\1\20\1\0\1\20\6\0\22\20\1\170"+
    "\5\20\11\0\1\20\1\0\1\20\6\0\1\20\1\171"+
    "\26\20\11\0\1\20\1\0\1\20\6\0\27\20\1\111"+
    "\11\0\1\20\1\0\1\20\6\0\15\20\1\172\12\20"+
    "\11\0\1\20\1\0\1\20\6\0\7\20\1\173\20\20"+
    "\11\0\1\20\1\0\1\20\6\0\23\20\1\111\4\20"+
    "\11\0\1\20\1\0\1\20\6\0\26\20\1\174\1\20"+
    "\11\0\1\20\1\0\1\20\6\0\6\20\1\175\21\20"+
    "\11\0\1\20\1\0\1\20\6\0\11\20\1\176\16\20"+
    "\11\0\1\20\1\0\1\20\6\0\11\20\1\177\16\20"+
    "\11\0\1\20\1\0\1\20\6\0\4\20\1\111\15\20"+
    "\1\200\5\20\11\0\1\20\1\0\1\20\6\0\16\20"+
    "\1\201\11\20\11\0\1\20\1\0\1\20\6\0\13\20"+
    "\1\202\14\20\11\0\1\20\1\0\1\20\6\0\1\20"+
    "\1\203\26\20\11\0\1\20\1\0\1\20\6\0\21\20"+
    "\1\143\6\20\11\0\1\20\1\0\1\20\6\0\21\20"+
    "\1\204\6\20\11\0\1\20\1\0\1\20\6\0\1\205"+
    "\1\206\26\20\11\0\1\20\1\0\1\20\6\0\4\20"+
    "\1\207\23\20\11\0\1\20\1\0\1\20\6\0\11\20"+
    "\1\210\16\20\11\0\1\20\1\0\1\20\6\0\13\20"+
    "\1\211\14\20\2\0\4\212\1\213\1\212\1\214\3\212"+
    "\1\152\1\153\1\0\35\212\7\0\1\20\1\0\1\20"+
    "\6\0\22\20\1\200\5\20\11\0\1\20\1\0\1\215"+
    "\4\0\1\216\1\0\1\20\6\215\21\20\13\0\1\216"+
    "\4\0\1\216\2\0\6\216\32\0\1\20\1\0\1\20"+
    "\6\0\1\20\1\111\26\20\11\0\1\20\1\0\1\20"+
    "\6\0\3\20\1\217\24\20\11\0\1\20\1\0\1\20"+
    "\6\0\5\20\1\111\22\20\11\0\1\20\1\0\1\20"+
    "\6\0\4\20\1\111\23\20\11\0\1\20\1\0\1\20"+
    "\6\0\16\20\1\220\11\20\11\0\1\20\1\0\1\20"+
    "\6\0\12\20\1\221\15\20\11\0\1\20\1\0\1\20"+
    "\6\0\4\20\1\222\22\20\1\111\11\0\1\20\1\0"+
    "\1\20\6\0\5\20\1\223\21\20\1\111\11\0\1\20"+
    "\1\0\1\20\6\0\5\20\1\224\22\20\11\0\1\20"+
    "\1\0\1\20\6\0\5\20\1\225\22\20\11\0\1\20"+
    "\1\0\1\20\6\0\13\20\1\226\14\20\11\0\1\20"+
    "\1\0\1\20\6\0\7\20\1\227\20\20\11\0\1\20"+
    "\1\0\1\20\6\0\10\20\1\230\17\20\11\0\1\20"+
    "\1\0\1\20\6\0\13\20\1\231\14\20\11\0\1\20"+
    "\1\0\1\20\6\0\24\20\1\232\3\20\11\0\1\20"+
    "\1\0\1\20\6\0\4\20\1\161\23\20\11\0\1\20"+
    "\1\0\1\20\6\0\15\20\1\233\12\20\11\0\1\20"+
    "\1\0\1\20\6\0\5\20\1\126\22\20\11\0\1\20"+
    "\1\0\1\20\6\0\21\20\1\161\6\20\11\0\1\20"+
    "\1\0\1\20\6\0\5\20\1\234\22\20\11\0\1\20"+
    "\1\0\1\20\6\0\4\20\1\235\23\20\11\0\1\20"+
    "\1\0\1\20\6\0\11\20\1\236\16\20\11\0\1\20"+
    "\1\0\1\20\6\0\16\20\1\224\11\20\11\0\1\20"+
    "\1\0\1\20\6\0\15\20\1\237\12\20\11\0\1\20"+
    "\1\0\1\20\6\0\5\20\1\240\22\20\11\0\1\20"+
    "\1\0\1\20\6\0\23\20\1\161\4\20\11\0\1\20"+
    "\1\0\1\20\6\0\13\20\1\235\14\20\2\0\12\212"+
    "\1\152\1\153\1\0\35\212\2\213\1\212\7\213\1\241"+
    "\1\242\1\243\34\213\1\212\2\214\1\212\7\214\1\244"+
    "\1\245\1\246\34\214\1\212\7\0\1\20\1\0\1\247"+
    "\4\0\1\250\1\0\1\20\6\247\21\20\13\0\1\250"+
    "\4\0\1\250\2\0\6\250\32\0\1\20\1\0\1\20"+
    "\6\0\12\20\1\111\15\20\11\0\1\20\1\0\1\20"+
    "\6\0\21\20\1\111\2\20\1\224\3\20\11\0\1\20"+
    "\1\0\1\20\6\0\1\251\27\20\11\0\1\20\1\0"+
    "\1\20\6\0\11\20\1\252\16\20\11\0\1\20\1\0"+
    "\1\20\6\0\15\20\1\111\12\20\11\0\1\20\1\0"+
    "\1\20\6\0\21\20\1\111\6\20\11\0\1\20\1\0"+
    "\1\20\6\0\21\20\1\253\6\20\11\0\1\20\1\0"+
    "\1\20\6\0\11\20\1\254\16\20\11\0\1\20\1\0"+
    "\1\20\6\0\1\205\27\20\11\0\1\20\1\0\1\20"+
    "\6\0\23\20\1\255\4\20\11\0\1\20\1\0\1\20"+
    "\6\0\11\20\1\256\16\20\11\0\1\20\1\0\1\20"+
    "\6\0\22\20\1\257\5\20\11\0\1\20\1\0\1\20"+
    "\6\0\2\20\1\235\25\20\11\0\1\20\1\0\1\20"+
    "\6\0\3\20\1\260\24\20\11\0\1\20\1\0\1\20"+
    "\6\0\16\20\1\261\11\20\11\0\1\20\1\0\1\20"+
    "\6\0\12\20\1\262\15\20\11\0\1\20\1\0\1\20"+
    "\6\0\22\20\1\263\5\20\11\0\1\20\1\0\1\20"+
    "\6\0\21\20\1\264\6\20\2\0\2\213\1\212\3\213"+
    "\1\265\3\213\1\241\1\242\1\243\34\213\1\212\2\243"+
    "\1\0\1\243\1\266\44\243\1\0\2\214\1\212\1\214"+
    "\1\265\5\214\1\244\1\245\1\246\34\214\1\212\2\246"+
    "\1\0\3\246\1\267\42\246\10\0\1\20\1\0\1\270"+
    "\4\0\1\271\1\0\1\20\6\270\21\20\13\0\1\271"+
    "\4\0\1\271\2\0\6\271\32\0\1\20\1\0\1\20"+
    "\6\0\1\20\1\26\1\272\4\20\1\273\7\20\1\274"+
    "\1\20\1\275\6\20\11\0\1\20\1\0\1\20\6\0"+
    "\5\20\1\115\22\20\11\0\1\20\1\0\1\20\6\0"+
    "\23\20\1\276\4\20\11\0\1\20\1\0\1\20\6\0"+
    "\3\20\1\111\24\20\11\0\1\20\1\0\1\20\6\0"+
    "\1\277\27\20\11\0\1\20\1\0\1\20\6\0\15\20"+
    "\1\161\12\20\11\0\1\20\1\0\1\20\6\0\3\20"+
    "\1\300\24\20\11\0\1\20\1\0\1\20\6\0\23\20"+
    "\1\205\4\20\11\0\1\20\1\0\1\20\6\0\26\20"+
    "\1\111\1\20\11\0\1\20\1\0\1\20\6\0\5\20"+
    "\1\301\22\20\11\0\1\20\1\0\1\20\6\0\11\20"+
    "\1\253\1\20\1\302\14\20\11\0\1\20\1\0\1\20"+
    "\6\0\13\20\1\303\14\20\2\0\2\265\1\212\10\265"+
    "\1\304\1\305\34\265\1\212\2\243\1\0\1\243\1\266"+
    "\5\243\1\241\1\242\35\243\1\0\2\246\1\0\3\246"+
    "\1\267\3\246\1\244\1\245\35\246\10\0\1\20\1\0"+
    "\1\111\4\0\1\306\1\0\1\20\6\111\21\20\13\0"+
    "\1\306\4\0\1\306\2\0\6\306\32\0\1\20\1\0"+
    "\1\20\6\0\13\20\1\307\14\20\11\0\1\20\1\0"+
    "\1\20\6\0\21\20\1\310\6\20\11\0\1\20\1\0"+
    "\1\20\6\0\24\20\1\311\3\20\11\0\1\20\1\0"+
    "\1\20\6\0\5\20\1\162\22\20\11\0\1\20\1\0"+
    "\1\20\6\0\11\20\1\312\16\20\11\0\1\20\1\0"+
    "\1\20\6\0\17\20\1\274\10\20\11\0\1\20\1\0"+
    "\1\20\6\0\1\20\1\313\26\20\11\0\1\20\1\0"+
    "\1\20\6\0\23\20\1\314\4\20\11\0\1\20\1\0"+
    "\1\20\6\0\1\20\1\315\26\20\11\0\1\20\1\0"+
    "\1\20\6\0\11\20\1\316\16\20\2\0\2\305\1\0"+
    "\1\305\1\317\1\305\1\317\42\305\10\0\1\20\1\0"+
    "\1\20\6\0\24\20\1\161\3\20\11\0\1\20\1\0"+
    "\1\20\6\0\1\20\1\123\3\20\1\166\22\20\11\0"+
    "\1\20\1\0\1\20\6\0\21\20\1\320\6\20\11\0"+
    "\1\20\1\0\1\20\6\0\16\20\1\223\11\20\11\0"+
    "\1\20\1\0\1\20\6\0\23\20\1\275\4\20\11\0"+
    "\1\20\1\0\1\20\6\0\10\20\1\321\17\20\11\0"+
    "\1\20\1\0\1\20\6\0\23\20\1\322\4\20\11\0"+
    "\1\20\1\0\1\20\6\0\15\20\1\275\12\20\2\0"+
    "\2\305\1\0\1\305\1\317\1\305\1\317\3\305\1\265"+
    "\1\304\35\305\10\0\1\20\1\0\1\20\6\0\17\20"+
    "\1\323\10\20\11\0\1\20\1\0\1\20\6\0\21\20"+
    "\1\324\6\20\11\0\1\20\1\0\1\20\6\0\5\20"+
    "\1\227\22\20\11\0\1\20\1\0\1\20\6\0\13\20"+
    "\1\161\14\20\11\0\1\20\1\0\1\20\6\0\16\20"+
    "\1\325\11\20\11\0\1\20\1\0\1\20\6\0\24\20"+
    "\1\326\3\20\11\0\1\20\1\0\1\20\6\0\7\20"+
    "\1\327\20\20\11\0\1\20\1\0\1\20\6\0\10\20"+
    "\1\111\17\20\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7980];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\5\0\5\1\1\11\4\1\4\11\25\1\3\11"+
    "\1\1\2\11\5\1\1\11\3\1\1\11\1\1\2\0"+
    "\1\1\2\11\5\1\1\0\37\1\3\11\1\1\1\11"+
    "\1\0\1\11\2\1\1\0\33\1\3\0\1\1\1\0"+
    "\22\1\1\0\1\1\2\0\1\1\1\0\1\1\1\0"+
    "\14\1\3\0\1\1\1\0\13\1\1\0\1\11\10\1"+
    "\1\0\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[215];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public MiniMessageLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiniMessageLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return PLAIN_TEXT;
            }
          // fall through
          case 23: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 24: break;
          case 3:
            { yybegin(TAG); return LT;
            }
          // fall through
          case 25: break;
          case 4:
            { return BAD_CHARACTER;
            }
          // fall through
          case 26: break;
          case 5:
            { return CUSTOM_TAG_NAME;
            }
          // fall through
          case 27: break;
          case 6:
            { return SLASH;
            }
          // fall through
          case 28: break;
          case 7:
            { yybegin(ARGUMENT_START_STATE); return COLON;
            }
          // fall through
          case 29: break;
          case 8:
            { return LT;
            }
          // fall through
          case 30: break;
          case 9:
            { yybegin(YYINITIAL); return GT;
            }
          // fall through
          case 31: break;
          case 10:
            { return TAG_NAME;
            }
          // fall through
          case 32: break;
          case 11:
            { yybegin(ARGUMENT_STATE); return ARGUMENT;
            }
          // fall through
          case 33: break;
          case 12:
            { yybegin(STRING_DOUBLE); return QUOTATION;
            }
          // fall through
          case 34: break;
          case 13:
            { yybegin(STRING_SINGLE); return QUOTATION;
            }
          // fall through
          case 35: break;
          case 14:
            { yypushback(1); yybegin(TAG); return ARGUMENT;
            }
          // fall through
          case 36: break;
          case 15:
            { return ARGUMENT;
            }
          // fall through
          case 37: break;
          case 16:
            { return STRING_TEXT;
            }
          // fall through
          case 38: break;
          case 17:
            { yybegin(TAG); return QUOTATION;
            }
          // fall through
          case 39: break;
          case 18:
            { yypushback(1); return PLAIN_TEXT;
            }
          // fall through
          case 40: break;
          case 19:
            { return ESCAPED_CHAR;
            }
          // fall through
          case 41: break;
          case 20:
            { return LEGACY_FORMATTING_CODE;
            }
          // fall through
          case 42: break;
          case 21:
            { yypushback(2); yybegin(TAG); return ARGUMENT;
            }
          // fall through
          case 43: break;
          case 22:
            { yybegin(ARGUMENT_STATE); return ESCAPED_CHAR;
            }
          // fall through
          case 44: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
