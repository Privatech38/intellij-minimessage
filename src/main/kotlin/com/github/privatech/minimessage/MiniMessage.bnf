//noinspection BnfSuspiciousTokenForFile
{
    parserClass="com.github.privatech.minimessage.parser.MiniMessageParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="MiniMessage"
    psiImplClassSuffix="Impl"
    psiPackage="com.github.privatech.minimessage.psi"
    psiImplPackage="com.github.privatech.minimessage.psi.impl"

    elementTypeHolderClass="com.github.privatech.minimessage.psi.MiniMessageTypes"
    elementTypeClass="com.github.privatech.minimessage.psi.MiniMessageElementType"
    tokenTypeClass="com.github.privatech.minimessage.psi.MiniMessageTokenType"

    parserUtilClass="com.github.privatech.minimessage.parser.MiniMessageParserUtil"

    tokens=[
        COLON=":"
        LT="<"
        GT=">"
        SLASH="/"
        ESCAPE='\'
        SECTION="ยง"

        word="regexp:[^a-zA-Z0-9_\-\\<>&&\S]*"
        space='regexp:\s+'
        legacyColorCode="regexp:[0-9a-fk-or]"
        tagName="regexp:[!?#]?[a-zA-Z0-9_-]*"
        string="regexp:\"[\u0000-\uFFFF(\\\")]*\"|'[\u0000-\uFFFF(\\')]*'"
    ]
}

root ::= (possibleTag | legacyFormattingCode | tag | plainText) *

plainText ::= tagName | word | legacyColorCode | space

possibleTag ::= ESCAPE LT? | emptyTag | LT+ space | LT+ tagName tagArgument? GT root tagClosing?

tag ::= autoClosedTag | tagOpening root tagClosing?

emptyTag      ::= LT GT
autoClosedTag ::= LT tagName tagArgument? SLASH GT
tagOpening    ::= LT tagName tagArgument? GT
tagClosing    ::= LT SLASH tagName GT {pin=2}

tagArgument ::= COLON argumentType tagArgument? {pin=1}
argumentType ::= string | tagName

legacyFormattingCode ::= !ESCAPE SECTION legacyColorCode
