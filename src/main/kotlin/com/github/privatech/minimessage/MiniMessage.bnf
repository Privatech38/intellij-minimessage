{
    parserClass="com.github.privatech.minimessage.parser.MiniMessageParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="MiniMessage"
    psiImplClassSuffix="Impl"
    psiPackage="com.github.privatech.minimessage.psi"
    psiImplPackage="com.github.privatech.minimessage.psi.impl"

    elementTypeHolderClass="com.github.privatech.minimessage.psi.MiniMessageTypes"
    elementTypeClass="com.github.privatech.minimessage.psi.MiniMessageElementType"
    tokenTypeClass="com.github.privatech.minimessage.psi.MiniMessageTokenType"

    tokens=[
        COLON=":"
        LT="<"
        GT=">"
        SLASH="/"
        ESCAPE='\'

        // Custom tokens
        PLAIN_TEXT
        TAG_NAME
        CUSTOM_TAG_NAME
        ARGUMENT
        STRING
        LEGACY_FORMATTING_CODE
        WHITE_SPACE
    ]
}

root ::= content

private content ::= (possibleTag | LEGACY_FORMATTING_CODE | PLAIN_TEXT) *

private possibleTag ::= ESCAPE LT? | emptyTag | LT+ WHITE_SPACE | tag

private tag ::= autoClosedTag | tagOpening | tagClosing

emptyTag      ::= LT+ GT
autoClosedTag ::= LT+ tagName tagArgument? SLASH GT
tagOpening    ::= LT+ tagName tagArgument? GT
tagClosing    ::= LT+ SLASH tagName GT {pin=2}

private tagName ::= TAG_NAME | CUSTOM_TAG_NAME

tagArgument ::= COLON argumentType tagArgument? {pin=1}
private argumentType ::= STRING | ARGUMENT
