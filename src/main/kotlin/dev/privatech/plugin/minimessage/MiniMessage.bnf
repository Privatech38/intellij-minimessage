{
    parserClass="dev.privatech.plugin.minimessage.parser.MiniMessageParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="MiniMessage"
    psiImplClassSuffix="Impl"
    psiPackage="dev.privatech.plugin.minimessage.psi"
    psiImplPackage="dev.privatech.plugin.minimessage.psi.impl"

    elementTypeHolderClass="dev.privatech.plugin.minimessage.psi.MiniMessageTypes"
    elementTypeClass="dev.privatech.plugin.minimessage.psi.MiniMessageElementType"
    tokenTypeClass="dev.privatech.plugin.minimessage.psi.MiniMessageTokenType"

    psiImplUtilClass="dev.privatech.plugin.minimessage.psi.impl.MiniMessagePsiImplUtil"

    tokens=[
        COLON=":"
        LT="<"
        GT=">"
        SLASH="/"

        // Custom tokens
        PLAIN_TEXT
        TAG_NAME
        CUSTOM_TAG_NAME
        ARGUMENT
        STRING
        LEGACY_FORMATTING_CODE
        WHITE_SPACE
        ESCAPED_CHAR
    ]
}

root ::= content

private content ::= (tag | LEGACY_FORMATTING_CODE | PLAIN_TEXT) *

private tag ::= opening_tag | closing_tag

opening_tag    ::= LT tag_name tag_argument * SLASH? GT // Can be self-closing, made like this for simplicity
closing_tag    ::= LT SLASH tag_name GT { pin=2 }

private tag_name ::= TAG_NAME | CUSTOM_TAG_NAME

tag_argument ::= COLON argument_type { pin=1 methods=[toString getTextRange] }
private argument_type ::= STRING | ARGUMENT
